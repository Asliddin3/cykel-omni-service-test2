// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: admin/admin.proto

package admin

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LockerRequest struct {
	LockerIMEI           int64    `protobuf:"varint,1,opt,name=LockerIMEI,proto3" json:"LockerIMEI"`
	LockerMessage        string   `protobuf:"bytes,2,opt,name=LockerMessage,proto3" json:"LockerMessage"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerRequest) Reset()         { *m = LockerRequest{} }
func (m *LockerRequest) String() string { return proto.CompactTextString(m) }
func (*LockerRequest) ProtoMessage()    {}
func (*LockerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8595c8dce2486799, []int{0}
}
func (m *LockerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerRequest.Merge(m, src)
}
func (m *LockerRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockerRequest proto.InternalMessageInfo

func (m *LockerRequest) GetLockerIMEI() int64 {
	if m != nil {
		return m.LockerIMEI
	}
	return 0
}

func (m *LockerRequest) GetLockerMessage() string {
	if m != nil {
		return m.LockerMessage
	}
	return ""
}

type AdminResponse struct {
	AdminMessage         string   `protobuf:"bytes,2,opt,name=AdminMessage,proto3" json:"AdminMessage"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminResponse) Reset()         { *m = AdminResponse{} }
func (m *AdminResponse) String() string { return proto.CompactTextString(m) }
func (*AdminResponse) ProtoMessage()    {}
func (*AdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8595c8dce2486799, []int{1}
}
func (m *AdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminResponse.Merge(m, src)
}
func (m *AdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *AdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdminResponse proto.InternalMessageInfo

func (m *AdminResponse) GetAdminMessage() string {
	if m != nil {
		return m.AdminMessage
	}
	return ""
}

type LocationRequest struct {
	IMEI                 int64    `protobuf:"varint,1,opt,name=IMEI,proto3" json:"IMEI"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationRequest) Reset()         { *m = LocationRequest{} }
func (m *LocationRequest) String() string { return proto.CompactTextString(m) }
func (*LocationRequest) ProtoMessage()    {}
func (*LocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8595c8dce2486799, []int{2}
}
func (m *LocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationRequest.Merge(m, src)
}
func (m *LocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *LocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LocationRequest proto.InternalMessageInfo

func (m *LocationRequest) GetIMEI() int64 {
	if m != nil {
		return m.IMEI
	}
	return 0
}

type LocationResponse struct {
	IsTracking           bool     `protobuf:"varint,1,opt,name=IsTracking,proto3" json:"IsTracking"`
	UTCtime              string   `protobuf:"bytes,2,opt,name=UTCtime,proto3" json:"UTCtime"`
	IsValid              bool     `protobuf:"varint,3,opt,name=IsValid,proto3" json:"IsValid"`
	Latitude             float32  `protobuf:"fixed32,4,opt,name=Latitude,proto3" json:"Latitude"`
	IsNorth              bool     `protobuf:"varint,5,opt,name=IsNorth,proto3" json:"IsNorth"`
	Longitude            float32  `protobuf:"fixed32,6,opt,name=Longitude,proto3" json:"Longitude"`
	IsEast               bool     `protobuf:"varint,8,opt,name=IsEast,proto3" json:"IsEast"`
	CountSate            int32    `protobuf:"varint,7,opt,name=CountSate,proto3" json:"CountSate"`
	PositionAccuracy     float32  `protobuf:"fixed32,9,opt,name=PositionAccuracy,proto3" json:"PositionAccuracy"`
	UTCdate              string   `protobuf:"bytes,10,opt,name=UTCdate,proto3" json:"UTCdate"`
	Altitude             int32    `protobuf:"varint,11,opt,name=Altitude,proto3" json:"Altitude"`
	HeightUnit           string   `protobuf:"bytes,12,opt,name=HeightUnit,proto3" json:"HeightUnit"`
	ModeIndication       string   `protobuf:"bytes,13,opt,name=ModeIndication,proto3" json:"ModeIndication"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationResponse) Reset()         { *m = LocationResponse{} }
func (m *LocationResponse) String() string { return proto.CompactTextString(m) }
func (*LocationResponse) ProtoMessage()    {}
func (*LocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8595c8dce2486799, []int{3}
}
func (m *LocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationResponse.Merge(m, src)
}
func (m *LocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *LocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LocationResponse proto.InternalMessageInfo

func (m *LocationResponse) GetIsTracking() bool {
	if m != nil {
		return m.IsTracking
	}
	return false
}

func (m *LocationResponse) GetUTCtime() string {
	if m != nil {
		return m.UTCtime
	}
	return ""
}

func (m *LocationResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *LocationResponse) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *LocationResponse) GetIsNorth() bool {
	if m != nil {
		return m.IsNorth
	}
	return false
}

func (m *LocationResponse) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *LocationResponse) GetIsEast() bool {
	if m != nil {
		return m.IsEast
	}
	return false
}

func (m *LocationResponse) GetCountSate() int32 {
	if m != nil {
		return m.CountSate
	}
	return 0
}

func (m *LocationResponse) GetPositionAccuracy() float32 {
	if m != nil {
		return m.PositionAccuracy
	}
	return 0
}

func (m *LocationResponse) GetUTCdate() string {
	if m != nil {
		return m.UTCdate
	}
	return ""
}

func (m *LocationResponse) GetAltitude() int32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *LocationResponse) GetHeightUnit() string {
	if m != nil {
		return m.HeightUnit
	}
	return ""
}

func (m *LocationResponse) GetModeIndication() string {
	if m != nil {
		return m.ModeIndication
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8595c8dce2486799, []int{4}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type UnlockResponse struct {
	UnlockResult         bool     `protobuf:"varint,1,opt,name=UnlockResult,proto3" json:"UnlockResult"`
	UserID               int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID"`
	UnlockedTime         int64    `protobuf:"varint,3,opt,name=UnlockedTime,proto3" json:"UnlockedTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockResponse) Reset()         { *m = UnlockResponse{} }
func (m *UnlockResponse) String() string { return proto.CompactTextString(m) }
func (*UnlockResponse) ProtoMessage()    {}
func (*UnlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8595c8dce2486799, []int{5}
}
func (m *UnlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockResponse.Merge(m, src)
}
func (m *UnlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockResponse proto.InternalMessageInfo

func (m *UnlockResponse) GetUnlockResult() bool {
	if m != nil {
		return m.UnlockResult
	}
	return false
}

func (m *UnlockResponse) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UnlockResponse) GetUnlockedTime() int64 {
	if m != nil {
		return m.UnlockedTime
	}
	return 0
}

type UnlockRequest struct {
	IMEI                 int64    `protobuf:"varint,1,opt,name=IMEI,proto3" json:"IMEI"`
	UserID               int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID"`
	ResetTime            bool     `protobuf:"varint,3,opt,name=ResetTime,proto3" json:"ResetTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockRequest) Reset()         { *m = UnlockRequest{} }
func (m *UnlockRequest) String() string { return proto.CompactTextString(m) }
func (*UnlockRequest) ProtoMessage()    {}
func (*UnlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8595c8dce2486799, []int{6}
}
func (m *UnlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockRequest.Merge(m, src)
}
func (m *UnlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockRequest proto.InternalMessageInfo

func (m *UnlockRequest) GetIMEI() int64 {
	if m != nil {
		return m.IMEI
	}
	return 0
}

func (m *UnlockRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UnlockRequest) GetResetTime() bool {
	if m != nil {
		return m.ResetTime
	}
	return false
}

func init() {
	proto.RegisterType((*LockerRequest)(nil), "admin.LockerRequest")
	proto.RegisterType((*AdminResponse)(nil), "admin.AdminResponse")
	proto.RegisterType((*LocationRequest)(nil), "admin.LocationRequest")
	proto.RegisterType((*LocationResponse)(nil), "admin.LocationResponse")
	proto.RegisterType((*Empty)(nil), "admin.Empty")
	proto.RegisterType((*UnlockResponse)(nil), "admin.UnlockResponse")
	proto.RegisterType((*UnlockRequest)(nil), "admin.UnlockRequest")
}

func init() { proto.RegisterFile("admin/admin.proto", fileDescriptor_8595c8dce2486799) }

var fileDescriptor_8595c8dce2486799 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0xf1, 0xba, 0x7e, 0x1d, 0xd6, 0xd1, 0x59, 0x30, 0xac, 0x6a, 0x8a, 0xaa, 0x08, 0x50,
	0xc5, 0xc5, 0x40, 0xec, 0x92, 0xab, 0xb2, 0x55, 0x10, 0xa9, 0x45, 0x28, 0x6d, 0x91, 0xb8, 0x0c,
	0xc9, 0x51, 0x67, 0xb5, 0x8d, 0x4b, 0xec, 0x20, 0xed, 0x4d, 0x10, 0x4f, 0xc4, 0x25, 0x17, 0x3c,
	0x00, 0x2a, 0x2f, 0x82, 0xec, 0xc4, 0xf9, 0xd8, 0xb4, 0x9b, 0xaa, 0xff, 0x9f, 0xfd, 0x3f, 0xf6,
	0x39, 0x3e, 0x27, 0x70, 0x12, 0x44, 0x5b, 0x1e, 0xbf, 0x32, 0xbf, 0xe7, 0xbb, 0x44, 0x28, 0x41,
	0x9b, 0x46, 0xb8, 0x4b, 0xe8, 0x4d, 0x45, 0xb8, 0xc6, 0xc4, 0xc7, 0x6f, 0x29, 0x4a, 0x45, 0x1d,
	0x80, 0x0c, 0x78, 0xb3, 0x89, 0xc7, 0xc8, 0x90, 0x8c, 0x1a, 0x7e, 0x85, 0xd0, 0x67, 0xd6, 0x30,
	0x43, 0x29, 0x83, 0x15, 0xb2, 0x83, 0x21, 0x19, 0x75, 0xfd, 0x3a, 0x74, 0x2f, 0xa0, 0x37, 0xd6,
	0xf1, 0x7d, 0x94, 0x3b, 0x11, 0x4b, 0xa4, 0x2e, 0x1c, 0x19, 0x50, 0x77, 0xd5, 0x98, 0xfb, 0x1c,
	0x1e, 0x4d, 0x45, 0x18, 0x28, 0x2e, 0x62, 0x7b, 0x1b, 0x0a, 0x87, 0x95, 0x7b, 0x98, 0xff, 0xee,
	0xcf, 0x06, 0xf4, 0xcb, 0x7d, 0x79, 0x7c, 0x07, 0xc0, 0x93, 0x8b, 0x24, 0x08, 0xd7, 0x3c, 0x5e,
	0x99, 0xed, 0x1d, 0xbf, 0x42, 0x28, 0x83, 0xf6, 0x72, 0x71, 0xa9, 0xf8, 0xd6, 0x1e, 0x6d, 0xa5,
	0x5e, 0xf1, 0xe4, 0xe7, 0x60, 0xc3, 0x23, 0xd6, 0x30, 0x36, 0x2b, 0xe9, 0x00, 0x3a, 0xd3, 0x40,
	0x71, 0x95, 0x46, 0xc8, 0x0e, 0x87, 0x64, 0x74, 0xe0, 0x17, 0x3a, 0x73, 0x7d, 0x14, 0x89, 0xba,
	0x66, 0x4d, 0xeb, 0x32, 0x92, 0x9e, 0x41, 0x77, 0x2a, 0xe2, 0x55, 0x66, 0x6b, 0x19, 0x5b, 0x09,
	0xe8, 0x29, 0xb4, 0x3c, 0x39, 0x09, 0xa4, 0x62, 0x1d, 0x63, 0xcb, 0x95, 0x76, 0x5d, 0x8a, 0x34,
	0x56, 0xf3, 0x40, 0x21, 0x6b, 0x0f, 0xc9, 0xa8, 0xe9, 0x97, 0x80, 0xbe, 0x84, 0xfe, 0x27, 0x21,
	0xb9, 0xce, 0x78, 0x1c, 0x86, 0x69, 0x12, 0x84, 0x37, 0xac, 0x6b, 0x42, 0xdf, 0xe1, 0x79, 0xa6,
	0x91, 0x8e, 0x03, 0x45, 0xa6, 0x5a, 0xea, 0x7c, 0xc6, 0x9b, 0x3c, 0x9f, 0x87, 0xe6, 0x88, 0x42,
	0xeb, 0xfa, 0x7d, 0x40, 0xbe, 0xba, 0x56, 0xcb, 0x98, 0x2b, 0x76, 0x64, 0x8c, 0x15, 0x42, 0x5f,
	0xc0, 0xf1, 0x4c, 0x44, 0xe8, 0xc5, 0x11, 0xcf, 0x2a, 0xcf, 0x7a, 0x66, 0xcf, 0x2d, 0xea, 0xb6,
	0xa1, 0x39, 0xd9, 0xee, 0xd4, 0x8d, 0xbb, 0x83, 0xe3, 0x65, 0xbc, 0x11, 0xe1, 0xba, 0xda, 0x02,
	0x05, 0x49, 0x37, 0x2a, 0x7f, 0xa4, 0x1a, 0xd3, 0xe5, 0x59, 0x4a, 0x4c, 0xbc, 0x2b, 0xf3, 0x4a,
	0x0d, 0x3f, 0x57, 0xa5, 0x17, 0xa3, 0x85, 0x7e, 0xc3, 0x86, 0x59, 0xad, 0x31, 0xf7, 0x0b, 0xf4,
	0x6c, 0xac, 0x7b, 0x9b, 0xe7, 0xde, 0x03, 0xce, 0xa0, 0xeb, 0xa3, 0x44, 0x55, 0x44, 0xef, 0xf8,
	0x25, 0x78, 0xf3, 0x87, 0xe4, 0xed, 0x3b, 0xc7, 0xe4, 0x3b, 0x0f, 0x91, 0x8e, 0x4d, 0xab, 0xae,
	0x31, 0x99, 0xab, 0x04, 0x83, 0xad, 0xee, 0xb0, 0xc7, 0xe7, 0xd9, 0x78, 0xd5, 0xc6, 0x69, 0x60,
	0x69, 0x6d, 0x1a, 0x46, 0xe4, 0x35, 0xa1, 0x6f, 0x6d, 0x4a, 0x99, 0xa1, 0xf0, 0xd7, 0x72, 0x18,
	0x3c, 0xb9, 0x45, 0xf3, 0x5a, 0x5e, 0xc1, 0xc9, 0x7b, 0x54, 0x99, 0xd3, 0xce, 0x02, 0x3d, 0x2d,
	0x6f, 0x50, 0x1d, 0xa2, 0xc1, 0xd3, 0x3b, 0x3c, 0x8b, 0xf2, 0xae, 0xff, 0x6b, 0xef, 0x90, 0xdf,
	0x7b, 0x87, 0xfc, 0xdd, 0x3b, 0xe4, 0xc7, 0x3f, 0xe7, 0xc1, 0xd7, 0x96, 0xf9, 0x38, 0x5c, 0xfc,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0xac, 0x89, 0x25, 0xef, 0x31, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminServiceClient interface {
	LockerStreaming(ctx context.Context, opts ...grpc.CallOption) (AdminService_LockerStreamingClient, error)
	UnlockLocker(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	GetLockerLocation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
}

type adminServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminServiceClient(cc *grpc.ClientConn) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) LockerStreaming(ctx context.Context, opts ...grpc.CallOption) (AdminService_LockerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdminService_serviceDesc.Streams[0], "/admin.AdminService/LockerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceLockerStreamingClient{stream}
	return x, nil
}

type AdminService_LockerStreamingClient interface {
	Send(*LockerRequest) error
	Recv() (*AdminResponse, error)
	grpc.ClientStream
}

type adminServiceLockerStreamingClient struct {
	grpc.ClientStream
}

func (x *adminServiceLockerStreamingClient) Send(m *LockerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *adminServiceLockerStreamingClient) Recv() (*AdminResponse, error) {
	m := new(AdminResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) UnlockLocker(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UnlockLocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLockerLocation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/GetLockerLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
type AdminServiceServer interface {
	LockerStreaming(AdminService_LockerStreamingServer) error
	UnlockLocker(context.Context, *UnlockRequest) (*UnlockResponse, error)
	GetLockerLocation(context.Context, *LocationRequest) (*LocationResponse, error)
}

// UnimplementedAdminServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (*UnimplementedAdminServiceServer) LockerStreaming(srv AdminService_LockerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method LockerStreaming not implemented")
}
func (*UnimplementedAdminServiceServer) UnlockLocker(ctx context.Context, req *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockLocker not implemented")
}
func (*UnimplementedAdminServiceServer) GetLockerLocation(ctx context.Context, req *LocationRequest) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockerLocation not implemented")
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_LockerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdminServiceServer).LockerStreaming(&adminServiceLockerStreamingServer{stream})
}

type AdminService_LockerStreamingServer interface {
	Send(*AdminResponse) error
	Recv() (*LockerRequest, error)
	grpc.ServerStream
}

type adminServiceLockerStreamingServer struct {
	grpc.ServerStream
}

func (x *adminServiceLockerStreamingServer) Send(m *AdminResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *adminServiceLockerStreamingServer) Recv() (*LockerRequest, error) {
	m := new(LockerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AdminService_UnlockLocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UnlockLocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UnlockLocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UnlockLocker(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLockerLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLockerLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/GetLockerLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLockerLocation(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnlockLocker",
			Handler:    _AdminService_UnlockLocker_Handler,
		},
		{
			MethodName: "GetLockerLocation",
			Handler:    _AdminService_GetLockerLocation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LockerStreaming",
			Handler:       _AdminService_LockerStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "admin/admin.proto",
}

func (m *LockerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LockerMessage) > 0 {
		i -= len(m.LockerMessage)
		copy(dAtA[i:], m.LockerMessage)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.LockerMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.LockerIMEI != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.LockerIMEI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AdminMessage) > 0 {
		i -= len(m.AdminMessage)
		copy(dAtA[i:], m.AdminMessage)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.AdminMessage)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *LocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IMEI != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.IMEI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ModeIndication) > 0 {
		i -= len(m.ModeIndication)
		copy(dAtA[i:], m.ModeIndication)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.ModeIndication)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.HeightUnit) > 0 {
		i -= len(m.HeightUnit)
		copy(dAtA[i:], m.HeightUnit)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.HeightUnit)))
		i--
		dAtA[i] = 0x62
	}
	if m.Altitude != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.Altitude))
		i--
		dAtA[i] = 0x58
	}
	if len(m.UTCdate) > 0 {
		i -= len(m.UTCdate)
		copy(dAtA[i:], m.UTCdate)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.UTCdate)))
		i--
		dAtA[i] = 0x52
	}
	if m.PositionAccuracy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PositionAccuracy))))
		i--
		dAtA[i] = 0x4d
	}
	if m.IsEast {
		i--
		if m.IsEast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.CountSate != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.CountSate))
		i--
		dAtA[i] = 0x38
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x35
	}
	if m.IsNorth {
		i--
		if m.IsNorth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x25
	}
	if m.IsValid {
		i--
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.UTCtime) > 0 {
		i -= len(m.UTCtime)
		copy(dAtA[i:], m.UTCtime)
		i = encodeVarintAdmin(dAtA, i, uint64(len(m.UTCtime)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsTracking {
		i--
		if m.IsTracking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UnlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UnlockedTime != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.UnlockedTime))
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.UnlockResult {
		i--
		if m.UnlockResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResetTime {
		i--
		if m.ResetTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.IMEI != 0 {
		i = encodeVarintAdmin(dAtA, i, uint64(m.IMEI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdmin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockerIMEI != 0 {
		n += 1 + sovAdmin(uint64(m.LockerIMEI))
	}
	l = len(m.LockerMessage)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminMessage)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IMEI != 0 {
		n += 1 + sovAdmin(uint64(m.IMEI))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsTracking {
		n += 2
	}
	l = len(m.UTCtime)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.IsValid {
		n += 2
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.IsNorth {
		n += 2
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.CountSate != 0 {
		n += 1 + sovAdmin(uint64(m.CountSate))
	}
	if m.IsEast {
		n += 2
	}
	if m.PositionAccuracy != 0 {
		n += 5
	}
	l = len(m.UTCdate)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.Altitude != 0 {
		n += 1 + sovAdmin(uint64(m.Altitude))
	}
	l = len(m.HeightUnit)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	l = len(m.ModeIndication)
	if l > 0 {
		n += 1 + l + sovAdmin(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnlockResult {
		n += 2
	}
	if m.UserID != 0 {
		n += 1 + sovAdmin(uint64(m.UserID))
	}
	if m.UnlockedTime != 0 {
		n += 1 + sovAdmin(uint64(m.UnlockedTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IMEI != 0 {
		n += 1 + sovAdmin(uint64(m.IMEI))
	}
	if m.UserID != 0 {
		n += 1 + sovAdmin(uint64(m.UserID))
	}
	if m.ResetTime {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdmin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIMEI", wireType)
			}
			m.LockerIMEI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerIMEI |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMEI", wireType)
			}
			m.IMEI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMEI |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTracking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTracking = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UTCtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UTCtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNorth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNorth = bool(v != 0)
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountSate", wireType)
			}
			m.CountSate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountSate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEast = bool(v != 0)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionAccuracy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PositionAccuracy = float32(math.Float32frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UTCdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UTCdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			m.Altitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Altitude |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeightUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeIndication", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdmin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeIndication = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlockResult = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockedTime", wireType)
			}
			m.UnlockedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMEI", wireType)
			}
			m.IMEI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMEI |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResetTime = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdmin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdmin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdmin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdmin = fmt.Errorf("proto: unexpected end of group")
)
