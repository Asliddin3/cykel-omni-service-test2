// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bike/bike.proto

package bike

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LockerBikeConnID struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerBikeConnID) Reset()         { *m = LockerBikeConnID{} }
func (m *LockerBikeConnID) String() string { return proto.CompactTextString(m) }
func (*LockerBikeConnID) ProtoMessage()    {}
func (*LockerBikeConnID) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{0}
}
func (m *LockerBikeConnID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerBikeConnID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerBikeConnID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerBikeConnID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerBikeConnID.Merge(m, src)
}
func (m *LockerBikeConnID) XXX_Size() int {
	return m.Size()
}
func (m *LockerBikeConnID) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerBikeConnID.DiscardUnknown(m)
}

var xxx_messageInfo_LockerBikeConnID proto.InternalMessageInfo

func (m *LockerBikeConnID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type LockerBikeConnRequest struct {
	ScanID               int64    `protobuf:"varint,1,opt,name=ScanID,proto3" json:"ScanID"`
	LockerID             int64    `protobuf:"varint,2,opt,name=LockerID,proto3" json:"LockerID"`
	BikeID               int64    `protobuf:"varint,3,opt,name=BikeID,proto3" json:"BikeID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerBikeConnRequest) Reset()         { *m = LockerBikeConnRequest{} }
func (m *LockerBikeConnRequest) String() string { return proto.CompactTextString(m) }
func (*LockerBikeConnRequest) ProtoMessage()    {}
func (*LockerBikeConnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{2}
}
func (m *LockerBikeConnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerBikeConnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerBikeConnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerBikeConnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerBikeConnRequest.Merge(m, src)
}
func (m *LockerBikeConnRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockerBikeConnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerBikeConnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockerBikeConnRequest proto.InternalMessageInfo

func (m *LockerBikeConnRequest) GetScanID() int64 {
	if m != nil {
		return m.ScanID
	}
	return 0
}

func (m *LockerBikeConnRequest) GetLockerID() int64 {
	if m != nil {
		return m.LockerID
	}
	return 0
}

func (m *LockerBikeConnRequest) GetBikeID() int64 {
	if m != nil {
		return m.BikeID
	}
	return 0
}

type LockerBikeConnResponse struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	ScanID               int64    `protobuf:"varint,2,opt,name=ScanID,proto3" json:"ScanID"`
	LockerID             int64    `protobuf:"varint,3,opt,name=LockerID,proto3" json:"LockerID"`
	BikeID               int64    `protobuf:"varint,4,opt,name=BikeID,proto3" json:"BikeID"`
	IsActive             bool     `protobuf:"varint,5,opt,name=IsActive,proto3" json:"IsActive"`
	UpdatedAt            string   `protobuf:"bytes,6,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	CreatedAt            string   `protobuf:"bytes,7,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerBikeConnResponse) Reset()         { *m = LockerBikeConnResponse{} }
func (m *LockerBikeConnResponse) String() string { return proto.CompactTextString(m) }
func (*LockerBikeConnResponse) ProtoMessage()    {}
func (*LockerBikeConnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{3}
}
func (m *LockerBikeConnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerBikeConnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerBikeConnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerBikeConnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerBikeConnResponse.Merge(m, src)
}
func (m *LockerBikeConnResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockerBikeConnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerBikeConnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockerBikeConnResponse proto.InternalMessageInfo

func (m *LockerBikeConnResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LockerBikeConnResponse) GetScanID() int64 {
	if m != nil {
		return m.ScanID
	}
	return 0
}

func (m *LockerBikeConnResponse) GetLockerID() int64 {
	if m != nil {
		return m.LockerID
	}
	return 0
}

func (m *LockerBikeConnResponse) GetBikeID() int64 {
	if m != nil {
		return m.BikeID
	}
	return 0
}

func (m *LockerBikeConnResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *LockerBikeConnResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *LockerBikeConnResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type StationResponse struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	Longitude            float32  `protobuf:"fixed32,2,opt,name=Longitude,proto3" json:"Longitude"`
	Latitude             float32  `protobuf:"fixed32,3,opt,name=Latitude,proto3" json:"Latitude"`
	Name                 string   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name"`
	UpdatedAt            string   `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StationResponse) Reset()         { *m = StationResponse{} }
func (m *StationResponse) String() string { return proto.CompactTextString(m) }
func (*StationResponse) ProtoMessage()    {}
func (*StationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{4}
}
func (m *StationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationResponse.Merge(m, src)
}
func (m *StationResponse) XXX_Size() int {
	return m.Size()
}
func (m *StationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StationResponse proto.InternalMessageInfo

func (m *StationResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *StationResponse) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *StationResponse) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *StationResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StationResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *StationResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type StationRequest struct {
	Longitude            float32  `protobuf:"fixed32,1,opt,name=Longitude,proto3" json:"Longitude"`
	Latitude             float32  `protobuf:"fixed32,2,opt,name=Latitude,proto3" json:"Latitude"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StationRequest) Reset()         { *m = StationRequest{} }
func (m *StationRequest) String() string { return proto.CompactTextString(m) }
func (*StationRequest) ProtoMessage()    {}
func (*StationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{5}
}
func (m *StationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationRequest.Merge(m, src)
}
func (m *StationRequest) XXX_Size() int {
	return m.Size()
}
func (m *StationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StationRequest proto.InternalMessageInfo

func (m *StationRequest) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *StationRequest) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *StationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BikeCategoryRequest struct {
	ImagePath            string   `protobuf:"bytes,1,opt,name=ImagePath,proto3" json:"ImagePath"`
	BikeType             string   `protobuf:"bytes,2,opt,name=BikeType,proto3" json:"BikeType"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BikeCategoryRequest) Reset()         { *m = BikeCategoryRequest{} }
func (m *BikeCategoryRequest) String() string { return proto.CompactTextString(m) }
func (*BikeCategoryRequest) ProtoMessage()    {}
func (*BikeCategoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{6}
}
func (m *BikeCategoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeCategoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeCategoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeCategoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeCategoryRequest.Merge(m, src)
}
func (m *BikeCategoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *BikeCategoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeCategoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BikeCategoryRequest proto.InternalMessageInfo

func (m *BikeCategoryRequest) GetImagePath() string {
	if m != nil {
		return m.ImagePath
	}
	return ""
}

func (m *BikeCategoryRequest) GetBikeType() string {
	if m != nil {
		return m.BikeType
	}
	return ""
}

type BikeCategoryResponse struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	ImagePath            string   `protobuf:"bytes,2,opt,name=ImagePath,proto3" json:"ImagePath"`
	BikeType             string   `protobuf:"bytes,3,opt,name=BikeType,proto3" json:"BikeType"`
	UpdatedAt            string   `protobuf:"bytes,4,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	CreatedAt            string   `protobuf:"bytes,5,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BikeCategoryResponse) Reset()         { *m = BikeCategoryResponse{} }
func (m *BikeCategoryResponse) String() string { return proto.CompactTextString(m) }
func (*BikeCategoryResponse) ProtoMessage()    {}
func (*BikeCategoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{7}
}
func (m *BikeCategoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeCategoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeCategoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeCategoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeCategoryResponse.Merge(m, src)
}
func (m *BikeCategoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *BikeCategoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeCategoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BikeCategoryResponse proto.InternalMessageInfo

func (m *BikeCategoryResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BikeCategoryResponse) GetImagePath() string {
	if m != nil {
		return m.ImagePath
	}
	return ""
}

func (m *BikeCategoryResponse) GetBikeType() string {
	if m != nil {
		return m.BikeType
	}
	return ""
}

func (m *BikeCategoryResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *BikeCategoryResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type BikeRequest struct {
	CategoryId           int64    `protobuf:"varint,1,opt,name=CategoryId,proto3" json:"CategoryId"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BikeRequest) Reset()         { *m = BikeRequest{} }
func (m *BikeRequest) String() string { return proto.CompactTextString(m) }
func (*BikeRequest) ProtoMessage()    {}
func (*BikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{8}
}
func (m *BikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeRequest.Merge(m, src)
}
func (m *BikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *BikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BikeRequest proto.InternalMessageInfo

func (m *BikeRequest) GetCategoryId() int64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *BikeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BikeCategoryID struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BikeCategoryID) Reset()         { *m = BikeCategoryID{} }
func (m *BikeCategoryID) String() string { return proto.CompactTextString(m) }
func (*BikeCategoryID) ProtoMessage()    {}
func (*BikeCategoryID) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{9}
}
func (m *BikeCategoryID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeCategoryID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeCategoryID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeCategoryID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeCategoryID.Merge(m, src)
}
func (m *BikeCategoryID) XXX_Size() int {
	return m.Size()
}
func (m *BikeCategoryID) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeCategoryID.DiscardUnknown(m)
}

var xxx_messageInfo_BikeCategoryID proto.InternalMessageInfo

func (m *BikeCategoryID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type BikeID struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BikeID) Reset()         { *m = BikeID{} }
func (m *BikeID) String() string { return proto.CompactTextString(m) }
func (*BikeID) ProtoMessage()    {}
func (*BikeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{10}
}
func (m *BikeID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeID.Merge(m, src)
}
func (m *BikeID) XXX_Size() int {
	return m.Size()
}
func (m *BikeID) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeID.DiscardUnknown(m)
}

var xxx_messageInfo_BikeID proto.InternalMessageInfo

func (m *BikeID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type StationID struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StationID) Reset()         { *m = StationID{} }
func (m *StationID) String() string { return proto.CompactTextString(m) }
func (*StationID) ProtoMessage()    {}
func (*StationID) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{11}
}
func (m *StationID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StationID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StationID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StationID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationID.Merge(m, src)
}
func (m *StationID) XXX_Size() int {
	return m.Size()
}
func (m *StationID) XXX_DiscardUnknown() {
	xxx_messageInfo_StationID.DiscardUnknown(m)
}

var xxx_messageInfo_StationID proto.InternalMessageInfo

func (m *StationID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type StationList struct {
	Stations             []*StationResponse `protobuf:"bytes,1,rep,name=Stations,proto3" json:"Stations"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StationList) Reset()         { *m = StationList{} }
func (m *StationList) String() string { return proto.CompactTextString(m) }
func (*StationList) ProtoMessage()    {}
func (*StationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{12}
}
func (m *StationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationList.Merge(m, src)
}
func (m *StationList) XXX_Size() int {
	return m.Size()
}
func (m *StationList) XXX_DiscardUnknown() {
	xxx_messageInfo_StationList.DiscardUnknown(m)
}

var xxx_messageInfo_StationList proto.InternalMessageInfo

func (m *StationList) GetStations() []*StationResponse {
	if m != nil {
		return m.Stations
	}
	return nil
}

type BikeCategoryList struct {
	BikeCategories       []*BikeCategoryResponse `protobuf:"bytes,1,rep,name=BikeCategories,proto3" json:"BikeCategories"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BikeCategoryList) Reset()         { *m = BikeCategoryList{} }
func (m *BikeCategoryList) String() string { return proto.CompactTextString(m) }
func (*BikeCategoryList) ProtoMessage()    {}
func (*BikeCategoryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{13}
}
func (m *BikeCategoryList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeCategoryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeCategoryList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeCategoryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeCategoryList.Merge(m, src)
}
func (m *BikeCategoryList) XXX_Size() int {
	return m.Size()
}
func (m *BikeCategoryList) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeCategoryList.DiscardUnknown(m)
}

var xxx_messageInfo_BikeCategoryList proto.InternalMessageInfo

func (m *BikeCategoryList) GetBikeCategories() []*BikeCategoryResponse {
	if m != nil {
		return m.BikeCategories
	}
	return nil
}

type BikeList struct {
	Bikes                []*BikeResponse `protobuf:"bytes,1,rep,name=Bikes,proto3" json:"Bikes"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BikeList) Reset()         { *m = BikeList{} }
func (m *BikeList) String() string { return proto.CompactTextString(m) }
func (*BikeList) ProtoMessage()    {}
func (*BikeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{14}
}
func (m *BikeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeList.Merge(m, src)
}
func (m *BikeList) XXX_Size() int {
	return m.Size()
}
func (m *BikeList) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeList.DiscardUnknown(m)
}

var xxx_messageInfo_BikeList proto.InternalMessageInfo

func (m *BikeList) GetBikes() []*BikeResponse {
	if m != nil {
		return m.Bikes
	}
	return nil
}

type BikeResponse struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	CategoryId           int64    `protobuf:"varint,2,opt,name=CategoryId,proto3" json:"CategoryId"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name"`
	IsBroken             bool     `protobuf:"varint,4,opt,name=IsBroken,proto3" json:"IsBroken"`
	CreatedAt            string   `protobuf:"bytes,5,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	UpdatedAt            string   `protobuf:"bytes,6,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BikeResponse) Reset()         { *m = BikeResponse{} }
func (m *BikeResponse) String() string { return proto.CompactTextString(m) }
func (*BikeResponse) ProtoMessage()    {}
func (*BikeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{15}
}
func (m *BikeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeResponse.Merge(m, src)
}
func (m *BikeResponse) XXX_Size() int {
	return m.Size()
}
func (m *BikeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BikeResponse proto.InternalMessageInfo

func (m *BikeResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BikeResponse) GetCategoryId() int64 {
	if m != nil {
		return m.CategoryId
	}
	return 0
}

func (m *BikeResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BikeResponse) GetIsBroken() bool {
	if m != nil {
		return m.IsBroken
	}
	return false
}

func (m *BikeResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *BikeResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type BikeFullInfoList struct {
	BikesInfo            []*BikeFullInfoResponse `protobuf:"bytes,1,rep,name=BikesInfo,proto3" json:"BikesInfo"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BikeFullInfoList) Reset()         { *m = BikeFullInfoList{} }
func (m *BikeFullInfoList) String() string { return proto.CompactTextString(m) }
func (*BikeFullInfoList) ProtoMessage()    {}
func (*BikeFullInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{16}
}
func (m *BikeFullInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeFullInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeFullInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeFullInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeFullInfoList.Merge(m, src)
}
func (m *BikeFullInfoList) XXX_Size() int {
	return m.Size()
}
func (m *BikeFullInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeFullInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_BikeFullInfoList proto.InternalMessageInfo

func (m *BikeFullInfoList) GetBikesInfo() []*BikeFullInfoResponse {
	if m != nil {
		return m.BikesInfo
	}
	return nil
}

type BikeFullInfoResponse struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name"`
	Type                 string   `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type"`
	ImagePath            string   `protobuf:"bytes,4,opt,name=ImagePath,proto3" json:"ImagePath"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BikeFullInfoResponse) Reset()         { *m = BikeFullInfoResponse{} }
func (m *BikeFullInfoResponse) String() string { return proto.CompactTextString(m) }
func (*BikeFullInfoResponse) ProtoMessage()    {}
func (*BikeFullInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_304718e1b297f8bf, []int{17}
}
func (m *BikeFullInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BikeFullInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BikeFullInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BikeFullInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BikeFullInfoResponse.Merge(m, src)
}
func (m *BikeFullInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *BikeFullInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BikeFullInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BikeFullInfoResponse proto.InternalMessageInfo

func (m *BikeFullInfoResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BikeFullInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BikeFullInfoResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BikeFullInfoResponse) GetImagePath() string {
	if m != nil {
		return m.ImagePath
	}
	return ""
}

func init() {
	proto.RegisterType((*LockerBikeConnID)(nil), "bike.LockerBikeConnID")
	proto.RegisterType((*Empty)(nil), "bike.Empty")
	proto.RegisterType((*LockerBikeConnRequest)(nil), "bike.LockerBikeConnRequest")
	proto.RegisterType((*LockerBikeConnResponse)(nil), "bike.LockerBikeConnResponse")
	proto.RegisterType((*StationResponse)(nil), "bike.StationResponse")
	proto.RegisterType((*StationRequest)(nil), "bike.StationRequest")
	proto.RegisterType((*BikeCategoryRequest)(nil), "bike.BikeCategoryRequest")
	proto.RegisterType((*BikeCategoryResponse)(nil), "bike.BikeCategoryResponse")
	proto.RegisterType((*BikeRequest)(nil), "bike.BikeRequest")
	proto.RegisterType((*BikeCategoryID)(nil), "bike.BikeCategoryID")
	proto.RegisterType((*BikeID)(nil), "bike.BikeID")
	proto.RegisterType((*StationID)(nil), "bike.StationID")
	proto.RegisterType((*StationList)(nil), "bike.StationList")
	proto.RegisterType((*BikeCategoryList)(nil), "bike.BikeCategoryList")
	proto.RegisterType((*BikeList)(nil), "bike.BikeList")
	proto.RegisterType((*BikeResponse)(nil), "bike.BikeResponse")
	proto.RegisterType((*BikeFullInfoList)(nil), "bike.BikeFullInfoList")
	proto.RegisterType((*BikeFullInfoResponse)(nil), "bike.BikeFullInfoResponse")
}

func init() { proto.RegisterFile("bike/bike.proto", fileDescriptor_304718e1b297f8bf) }

var fileDescriptor_304718e1b297f8bf = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xdb, 0x6e, 0xd3, 0x4c,
	0x10, 0xfe, 0xed, 0x1c, 0x5a, 0x4f, 0xaa, 0xa4, 0xd9, 0xa6, 0x51, 0xfe, 0xb4, 0x8a, 0x22, 0xdf,
	0x10, 0x81, 0x54, 0xd4, 0x83, 0x44, 0x05, 0x37, 0x4d, 0x1a, 0x40, 0x16, 0x11, 0x07, 0x17, 0xb8,
	0x44, 0x72, 0x93, 0xa5, 0x58, 0x49, 0xe3, 0x90, 0x6c, 0x2b, 0xf5, 0x4d, 0xb8, 0xe0, 0x09, 0xe0,
	0x45, 0xb8, 0xe0, 0x82, 0x0b, 0x1e, 0x00, 0x95, 0x17, 0x41, 0xde, 0xb5, 0xbd, 0x07, 0xaf, 0xdd,
	0x9b, 0xc8, 0x3b, 0x33, 0xdf, 0xcc, 0x7c, 0xdf, 0xcc, 0xda, 0x81, 0xda, 0xb9, 0x3f, 0xc5, 0x0f,
	0xc3, 0x9f, 0xbd, 0xc5, 0x32, 0x20, 0x01, 0x2a, 0x86, 0xcf, 0xb6, 0x0d, 0x9b, 0xa3, 0x60, 0x3c,
	0xc5, 0xcb, 0x81, 0x3f, 0xc5, 0xa7, 0xc1, 0x7c, 0xee, 0x0c, 0x51, 0x15, 0x4c, 0x67, 0xd8, 0x32,
	0xba, 0x46, 0xaf, 0xe0, 0x9a, 0xce, 0xd0, 0x5e, 0x83, 0xd2, 0xd3, 0xcb, 0x05, 0xb9, 0xb1, 0xc7,
	0xb0, 0x2d, 0x07, 0xbb, 0xf8, 0xf3, 0x15, 0x5e, 0x11, 0xd4, 0x84, 0xf2, 0xd9, 0xd8, 0x9b, 0x27,
	0xa8, 0xe8, 0x84, 0xda, 0xb0, 0xce, 0x00, 0xce, 0xb0, 0x65, 0x52, 0x4f, 0x72, 0x0e, 0x31, 0x61,
	0x1a, 0x67, 0xd8, 0x2a, 0x30, 0x0c, 0x3b, 0xd9, 0x3f, 0x0d, 0x68, 0xaa, 0x55, 0x56, 0x8b, 0x60,
	0xbe, 0xc2, 0x6a, 0x63, 0x42, 0x59, 0x33, 0xb3, 0x6c, 0x21, 0xb3, 0x6c, 0x51, 0x2c, 0x1b, 0x62,
	0x9c, 0x55, 0x7f, 0x4c, 0xfc, 0x6b, 0xdc, 0x2a, 0x75, 0x8d, 0xde, 0xba, 0x9b, 0x9c, 0xd1, 0x2e,
	0x58, 0xef, 0x16, 0x13, 0x8f, 0xe0, 0x49, 0x9f, 0xb4, 0xca, 0x5d, 0xa3, 0x67, 0xb9, 0xdc, 0x10,
	0x7a, 0x4f, 0x97, 0x38, 0xf2, 0xae, 0x31, 0x6f, 0x62, 0xb0, 0xbf, 0x1b, 0x50, 0x3b, 0x23, 0x1e,
	0xf1, 0x83, 0x6c, 0x1e, 0xbb, 0x60, 0x8d, 0x82, 0xf9, 0x85, 0x4f, 0xae, 0x26, 0x98, 0x52, 0x31,
	0x5d, 0x6e, 0xa0, 0x6c, 0x3c, 0xc2, 0x9c, 0x05, 0xea, 0x4c, 0xce, 0x08, 0x41, 0xf1, 0xa5, 0x77,
	0x89, 0x29, 0x17, 0xcb, 0xa5, 0xcf, 0x72, 0xb7, 0xa5, 0xdc, 0x6e, 0xcb, 0x6a, 0xb7, 0x1f, 0xa0,
	0x9a, 0x34, 0xcb, 0x46, 0x2b, 0xf5, 0x66, 0xe4, 0xf5, 0x66, 0x66, 0xf4, 0x56, 0xe0, 0xbd, 0xd9,
	0xaf, 0x60, 0x8b, 0x4e, 0xd5, 0x23, 0xf8, 0x22, 0x58, 0xde, 0x08, 0x45, 0x9c, 0x4b, 0xef, 0x02,
	0xbf, 0xf6, 0xc8, 0x27, 0x5a, 0xc4, 0x72, 0xb9, 0x21, 0x2c, 0x12, 0x82, 0xde, 0xde, 0x2c, 0x58,
	0x11, 0xcb, 0x4d, 0xce, 0xf6, 0x57, 0x03, 0x1a, 0x72, 0xc6, 0x6c, 0x8d, 0x79, 0x09, 0x33, 0xaf,
	0x44, 0x41, 0x2e, 0x21, 0xeb, 0x59, 0xcc, 0xd5, 0xb3, 0xa4, 0xea, 0xd9, 0x87, 0x4a, 0x98, 0x27,
	0xe6, 0xd9, 0x01, 0x88, 0x1b, 0x75, 0x26, 0x51, 0x73, 0x82, 0x25, 0x91, 0xcc, 0x14, 0x24, 0xeb,
	0x42, 0x55, 0x24, 0xa8, 0xb9, 0x9f, 0xad, 0x78, 0xa5, 0x53, 0x9e, 0x1d, 0xb0, 0xa2, 0x71, 0x6a,
	0x9c, 0x27, 0x50, 0x89, 0x9c, 0x23, 0x7f, 0x45, 0xd0, 0x3e, 0xac, 0x47, 0xc7, 0x55, 0xcb, 0xe8,
	0x16, 0x7a, 0x95, 0x83, 0xed, 0x3d, 0xfa, 0xba, 0x50, 0xb6, 0xd7, 0x4d, 0xc2, 0xec, 0xf7, 0xb0,
	0x29, 0xb6, 0x46, 0xd3, 0x0c, 0xa4, 0x76, 0x7d, 0x1c, 0x27, 0x6b, 0xb3, 0x64, 0xba, 0x59, 0xb9,
	0x0a, 0xc2, 0x3e, 0x62, 0xd3, 0xa0, 0xf9, 0x7a, 0x50, 0x0a, 0x9f, 0xe3, 0x34, 0x88, 0xa7, 0x49,
	0xe0, 0x2c, 0xc0, 0xfe, 0x66, 0xc0, 0x86, 0x68, 0x4f, 0xad, 0x80, 0xac, 0xbe, 0x99, 0xa9, 0xbe,
	0xb0, 0xb0, 0xec, 0xb5, 0x30, 0x58, 0x06, 0x53, 0x3c, 0xa7, 0xb3, 0xa7, 0xaf, 0x05, 0x76, 0xce,
	0x1f, 0x7d, 0xfe, 0x4b, 0xc3, 0x1e, 0x31, 0xe9, 0x9e, 0x5d, 0xcd, 0x66, 0xce, 0xfc, 0x63, 0x40,
	0xa9, 0x1e, 0x83, 0x45, 0x99, 0x84, 0x86, 0xb4, 0x6a, 0x71, 0x68, 0x42, 0x9b, 0x07, 0xdb, 0x33,
	0x76, 0x09, 0xd4, 0x90, 0x94, 0x02, 0x9a, 0xfd, 0x0a, 0x6d, 0xc2, 0xda, 0x17, 0xe3, 0x95, 0xe7,
	0x97, 0xa5, 0xa8, 0x5c, 0x96, 0x83, 0xdf, 0x16, 0xdb, 0xea, 0x33, 0xbc, 0xbc, 0xf6, 0xc7, 0x18,
	0xbd, 0x00, 0xc4, 0x68, 0x8b, 0xc3, 0x45, 0xff, 0xeb, 0x06, 0x4e, 0xaf, 0x41, 0x3b, 0x67, 0x17,
	0xd0, 0x21, 0x00, 0x4f, 0x86, 0xea, 0xe2, 0xb8, 0x19, 0x58, 0xb3, 0x01, 0xe8, 0x04, 0xea, 0x1c,
	0x14, 0xad, 0x27, 0x6a, 0x28, 0xeb, 0xcb, 0xe0, 0xfa, 0xa5, 0x46, 0x6f, 0xa0, 0xc1, 0x32, 0xc8,
	0x9f, 0x1e, 0xb4, 0xc3, 0xc2, 0xb5, 0x9f, 0xbd, 0xf6, 0xae, 0xde, 0x19, 0xa5, 0x1c, 0x01, 0x62,
	0xf3, 0x96, 0x64, 0xc9, 0xe1, 0x9e, 0xab, 0xcb, 0x11, 0x00, 0xcf, 0x86, 0x34, 0x22, 0x68, 0x85,
	0xe9, 0x43, 0x9d, 0xa3, 0x62, 0x61, 0xf4, 0x12, 0x64, 0x29, 0xe3, 0x42, 0x83, 0xa5, 0x50, 0x94,
	0xc9, 0x25, 0x7f, 0x87, 0x34, 0x8f, 0x00, 0x0d, 0xf1, 0x0c, 0x2b, 0xd2, 0x34, 0xd2, 0xf4, 0x9d,
	0x61, 0xbb, 0xc2, 0xac, 0xf4, 0x1f, 0x08, 0xba, 0x07, 0xc0, 0x81, 0x68, 0x83, 0x03, 0xd4, 0xc0,
	0x7d, 0xa8, 0xf3, 0xc0, 0x98, 0x78, 0x4d, 0x62, 0xa8, 0x42, 0x9e, 0x40, 0x83, 0x41, 0x14, 0xa2,
	0x4d, 0x1d, 0x95, 0x34, 0xb8, 0xf6, 0x1c, 0x13, 0xf1, 0x12, 0x2a, 0xdd, 0xe5, 0xdc, 0x64, 0xf4,
	0x18, 0xb6, 0x14, 0x30, 0x7d, 0x1f, 0x88, 0x05, 0xda, 0xcd, 0x34, 0x9e, 0x06, 0x3d, 0x80, 0xb5,
	0x08, 0xab, 0x14, 0xd4, 0xad, 0xc3, 0x69, 0xd2, 0xe5, 0x1d, 0xa2, 0xe7, 0x6d, 0xe2, 0x31, 0x54,
	0xa3, 0x24, 0x99, 0xba, 0x66, 0xac, 0xd2, 0x7d, 0xa8, 0x44, 0xc8, 0x34, 0xbf, 0x2a, 0xaf, 0x48,
	0x9d, 0x5c, 0x13, 0xe9, 0xf3, 0x92, 0xa5, 0x89, 0x14, 0x74, 0x04, 0x48, 0xee, 0x30, 0x0d, 0xad,
	0x4b, 0x1d, 0x86, 0xfe, 0xc1, 0xe6, 0x8f, 0xdb, 0x8e, 0xf1, 0xeb, 0xb6, 0x63, 0xfc, 0xb9, 0xed,
	0x18, 0x5f, 0xfe, 0x76, 0xfe, 0x3b, 0x2f, 0xd3, 0x7f, 0xca, 0x87, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x45, 0xa1, 0xc2, 0x65, 0x3c, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BikeServiceClient is the client API for BikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BikeServiceClient interface {
	CreateBikeCategory(ctx context.Context, in *BikeCategoryRequest, opts ...grpc.CallOption) (*BikeCategoryResponse, error)
	CreateBike(ctx context.Context, in *BikeRequest, opts ...grpc.CallOption) (*BikeResponse, error)
	CreateBikeStation(ctx context.Context, in *StationRequest, opts ...grpc.CallOption) (*StationResponse, error)
	CreateLockerBikeConn(ctx context.Context, in *LockerBikeConnRequest, opts ...grpc.CallOption) (*LockerBikeConnResponse, error)
	UpdateBikeCategory(ctx context.Context, in *BikeCategoryResponse, opts ...grpc.CallOption) (*BikeCategoryResponse, error)
	UpdateBike(ctx context.Context, in *BikeResponse, opts ...grpc.CallOption) (*BikeResponse, error)
	UpdateBikeStation(ctx context.Context, in *StationResponse, opts ...grpc.CallOption) (*StationResponse, error)
	UpdateLockerBikeConn(ctx context.Context, in *LockerBikeConnResponse, opts ...grpc.CallOption) (*LockerBikeConnResponse, error)
	DeleteBikeCategory(ctx context.Context, in *BikeCategoryID, opts ...grpc.CallOption) (*Empty, error)
	DeleteBike(ctx context.Context, in *BikeID, opts ...grpc.CallOption) (*Empty, error)
	DeleteBikeStation(ctx context.Context, in *StationID, opts ...grpc.CallOption) (*Empty, error)
	DeleteLockerBikeConn(ctx context.Context, in *LockerBikeConnID, opts ...grpc.CallOption) (*Empty, error)
	GetBikeFullInfo(ctx context.Context, in *BikeID, opts ...grpc.CallOption) (*BikeFullInfoResponse, error)
	GetBikeFullInfoList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BikeFullInfoList, error)
	GetBike(ctx context.Context, in *BikeID, opts ...grpc.CallOption) (*BikeResponse, error)
	GetBikeCategory(ctx context.Context, in *BikeCategoryID, opts ...grpc.CallOption) (*BikeCategoryResponse, error)
	GetBikeStation(ctx context.Context, in *StationID, opts ...grpc.CallOption) (*StationResponse, error)
	GetBikeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BikeList, error)
	GetBikeCategoryList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BikeCategoryList, error)
	GetBikeStationList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StationList, error)
}

type bikeServiceClient struct {
	cc *grpc.ClientConn
}

func NewBikeServiceClient(cc *grpc.ClientConn) BikeServiceClient {
	return &bikeServiceClient{cc}
}

func (c *bikeServiceClient) CreateBikeCategory(ctx context.Context, in *BikeCategoryRequest, opts ...grpc.CallOption) (*BikeCategoryResponse, error) {
	out := new(BikeCategoryResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/CreateBikeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) CreateBike(ctx context.Context, in *BikeRequest, opts ...grpc.CallOption) (*BikeResponse, error) {
	out := new(BikeResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/CreateBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) CreateBikeStation(ctx context.Context, in *StationRequest, opts ...grpc.CallOption) (*StationResponse, error) {
	out := new(StationResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/CreateBikeStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) CreateLockerBikeConn(ctx context.Context, in *LockerBikeConnRequest, opts ...grpc.CallOption) (*LockerBikeConnResponse, error) {
	out := new(LockerBikeConnResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/CreateLockerBikeConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) UpdateBikeCategory(ctx context.Context, in *BikeCategoryResponse, opts ...grpc.CallOption) (*BikeCategoryResponse, error) {
	out := new(BikeCategoryResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/UpdateBikeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) UpdateBike(ctx context.Context, in *BikeResponse, opts ...grpc.CallOption) (*BikeResponse, error) {
	out := new(BikeResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/UpdateBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) UpdateBikeStation(ctx context.Context, in *StationResponse, opts ...grpc.CallOption) (*StationResponse, error) {
	out := new(StationResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/UpdateBikeStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) UpdateLockerBikeConn(ctx context.Context, in *LockerBikeConnResponse, opts ...grpc.CallOption) (*LockerBikeConnResponse, error) {
	out := new(LockerBikeConnResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/UpdateLockerBikeConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) DeleteBikeCategory(ctx context.Context, in *BikeCategoryID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bike.BikeService/DeleteBikeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) DeleteBike(ctx context.Context, in *BikeID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bike.BikeService/DeleteBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) DeleteBikeStation(ctx context.Context, in *StationID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bike.BikeService/DeleteBikeStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) DeleteLockerBikeConn(ctx context.Context, in *LockerBikeConnID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bike.BikeService/DeleteLockerBikeConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) GetBikeFullInfo(ctx context.Context, in *BikeID, opts ...grpc.CallOption) (*BikeFullInfoResponse, error) {
	out := new(BikeFullInfoResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/GetBikeFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) GetBikeFullInfoList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BikeFullInfoList, error) {
	out := new(BikeFullInfoList)
	err := c.cc.Invoke(ctx, "/bike.BikeService/GetBikeFullInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) GetBike(ctx context.Context, in *BikeID, opts ...grpc.CallOption) (*BikeResponse, error) {
	out := new(BikeResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/GetBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) GetBikeCategory(ctx context.Context, in *BikeCategoryID, opts ...grpc.CallOption) (*BikeCategoryResponse, error) {
	out := new(BikeCategoryResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/GetBikeCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) GetBikeStation(ctx context.Context, in *StationID, opts ...grpc.CallOption) (*StationResponse, error) {
	out := new(StationResponse)
	err := c.cc.Invoke(ctx, "/bike.BikeService/GetBikeStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) GetBikeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BikeList, error) {
	out := new(BikeList)
	err := c.cc.Invoke(ctx, "/bike.BikeService/GetBikeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) GetBikeCategoryList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BikeCategoryList, error) {
	out := new(BikeCategoryList)
	err := c.cc.Invoke(ctx, "/bike.BikeService/GetBikeCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeServiceClient) GetBikeStationList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StationList, error) {
	out := new(StationList)
	err := c.cc.Invoke(ctx, "/bike.BikeService/GetBikeStationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BikeServiceServer is the server API for BikeService service.
type BikeServiceServer interface {
	CreateBikeCategory(context.Context, *BikeCategoryRequest) (*BikeCategoryResponse, error)
	CreateBike(context.Context, *BikeRequest) (*BikeResponse, error)
	CreateBikeStation(context.Context, *StationRequest) (*StationResponse, error)
	CreateLockerBikeConn(context.Context, *LockerBikeConnRequest) (*LockerBikeConnResponse, error)
	UpdateBikeCategory(context.Context, *BikeCategoryResponse) (*BikeCategoryResponse, error)
	UpdateBike(context.Context, *BikeResponse) (*BikeResponse, error)
	UpdateBikeStation(context.Context, *StationResponse) (*StationResponse, error)
	UpdateLockerBikeConn(context.Context, *LockerBikeConnResponse) (*LockerBikeConnResponse, error)
	DeleteBikeCategory(context.Context, *BikeCategoryID) (*Empty, error)
	DeleteBike(context.Context, *BikeID) (*Empty, error)
	DeleteBikeStation(context.Context, *StationID) (*Empty, error)
	DeleteLockerBikeConn(context.Context, *LockerBikeConnID) (*Empty, error)
	GetBikeFullInfo(context.Context, *BikeID) (*BikeFullInfoResponse, error)
	GetBikeFullInfoList(context.Context, *Empty) (*BikeFullInfoList, error)
	GetBike(context.Context, *BikeID) (*BikeResponse, error)
	GetBikeCategory(context.Context, *BikeCategoryID) (*BikeCategoryResponse, error)
	GetBikeStation(context.Context, *StationID) (*StationResponse, error)
	GetBikeList(context.Context, *Empty) (*BikeList, error)
	GetBikeCategoryList(context.Context, *Empty) (*BikeCategoryList, error)
	GetBikeStationList(context.Context, *Empty) (*StationList, error)
}

// UnimplementedBikeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBikeServiceServer struct {
}

func (*UnimplementedBikeServiceServer) CreateBikeCategory(ctx context.Context, req *BikeCategoryRequest) (*BikeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBikeCategory not implemented")
}
func (*UnimplementedBikeServiceServer) CreateBike(ctx context.Context, req *BikeRequest) (*BikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBike not implemented")
}
func (*UnimplementedBikeServiceServer) CreateBikeStation(ctx context.Context, req *StationRequest) (*StationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBikeStation not implemented")
}
func (*UnimplementedBikeServiceServer) CreateLockerBikeConn(ctx context.Context, req *LockerBikeConnRequest) (*LockerBikeConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLockerBikeConn not implemented")
}
func (*UnimplementedBikeServiceServer) UpdateBikeCategory(ctx context.Context, req *BikeCategoryResponse) (*BikeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBikeCategory not implemented")
}
func (*UnimplementedBikeServiceServer) UpdateBike(ctx context.Context, req *BikeResponse) (*BikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBike not implemented")
}
func (*UnimplementedBikeServiceServer) UpdateBikeStation(ctx context.Context, req *StationResponse) (*StationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBikeStation not implemented")
}
func (*UnimplementedBikeServiceServer) UpdateLockerBikeConn(ctx context.Context, req *LockerBikeConnResponse) (*LockerBikeConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLockerBikeConn not implemented")
}
func (*UnimplementedBikeServiceServer) DeleteBikeCategory(ctx context.Context, req *BikeCategoryID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBikeCategory not implemented")
}
func (*UnimplementedBikeServiceServer) DeleteBike(ctx context.Context, req *BikeID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBike not implemented")
}
func (*UnimplementedBikeServiceServer) DeleteBikeStation(ctx context.Context, req *StationID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBikeStation not implemented")
}
func (*UnimplementedBikeServiceServer) DeleteLockerBikeConn(ctx context.Context, req *LockerBikeConnID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLockerBikeConn not implemented")
}
func (*UnimplementedBikeServiceServer) GetBikeFullInfo(ctx context.Context, req *BikeID) (*BikeFullInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikeFullInfo not implemented")
}
func (*UnimplementedBikeServiceServer) GetBikeFullInfoList(ctx context.Context, req *Empty) (*BikeFullInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikeFullInfoList not implemented")
}
func (*UnimplementedBikeServiceServer) GetBike(ctx context.Context, req *BikeID) (*BikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBike not implemented")
}
func (*UnimplementedBikeServiceServer) GetBikeCategory(ctx context.Context, req *BikeCategoryID) (*BikeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikeCategory not implemented")
}
func (*UnimplementedBikeServiceServer) GetBikeStation(ctx context.Context, req *StationID) (*StationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikeStation not implemented")
}
func (*UnimplementedBikeServiceServer) GetBikeList(ctx context.Context, req *Empty) (*BikeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikeList not implemented")
}
func (*UnimplementedBikeServiceServer) GetBikeCategoryList(ctx context.Context, req *Empty) (*BikeCategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikeCategoryList not implemented")
}
func (*UnimplementedBikeServiceServer) GetBikeStationList(ctx context.Context, req *Empty) (*StationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBikeStationList not implemented")
}

func RegisterBikeServiceServer(s *grpc.Server, srv BikeServiceServer) {
	s.RegisterService(&_BikeService_serviceDesc, srv)
}

func _BikeService_CreateBikeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).CreateBikeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/CreateBikeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).CreateBikeCategory(ctx, req.(*BikeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_CreateBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).CreateBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/CreateBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).CreateBike(ctx, req.(*BikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_CreateBikeStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).CreateBikeStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/CreateBikeStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).CreateBikeStation(ctx, req.(*StationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_CreateLockerBikeConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerBikeConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).CreateLockerBikeConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/CreateLockerBikeConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).CreateLockerBikeConn(ctx, req.(*LockerBikeConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_UpdateBikeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeCategoryResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).UpdateBikeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/UpdateBikeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).UpdateBikeCategory(ctx, req.(*BikeCategoryResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_UpdateBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).UpdateBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/UpdateBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).UpdateBike(ctx, req.(*BikeResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_UpdateBikeStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).UpdateBikeStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/UpdateBikeStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).UpdateBikeStation(ctx, req.(*StationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_UpdateLockerBikeConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerBikeConnResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).UpdateLockerBikeConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/UpdateLockerBikeConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).UpdateLockerBikeConn(ctx, req.(*LockerBikeConnResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_DeleteBikeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeCategoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).DeleteBikeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/DeleteBikeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).DeleteBikeCategory(ctx, req.(*BikeCategoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_DeleteBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).DeleteBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/DeleteBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).DeleteBike(ctx, req.(*BikeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_DeleteBikeStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).DeleteBikeStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/DeleteBikeStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).DeleteBikeStation(ctx, req.(*StationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_DeleteLockerBikeConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerBikeConnID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).DeleteLockerBikeConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/DeleteLockerBikeConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).DeleteLockerBikeConn(ctx, req.(*LockerBikeConnID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_GetBikeFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).GetBikeFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/GetBikeFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).GetBikeFullInfo(ctx, req.(*BikeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_GetBikeFullInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).GetBikeFullInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/GetBikeFullInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).GetBikeFullInfoList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_GetBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).GetBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/GetBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).GetBike(ctx, req.(*BikeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_GetBikeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeCategoryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).GetBikeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/GetBikeCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).GetBikeCategory(ctx, req.(*BikeCategoryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_GetBikeStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).GetBikeStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/GetBikeStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).GetBikeStation(ctx, req.(*StationID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_GetBikeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).GetBikeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/GetBikeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).GetBikeList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_GetBikeCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).GetBikeCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/GetBikeCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).GetBikeCategoryList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeService_GetBikeStationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeServiceServer).GetBikeStationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bike.BikeService/GetBikeStationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeServiceServer).GetBikeStationList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BikeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bike.BikeService",
	HandlerType: (*BikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBikeCategory",
			Handler:    _BikeService_CreateBikeCategory_Handler,
		},
		{
			MethodName: "CreateBike",
			Handler:    _BikeService_CreateBike_Handler,
		},
		{
			MethodName: "CreateBikeStation",
			Handler:    _BikeService_CreateBikeStation_Handler,
		},
		{
			MethodName: "CreateLockerBikeConn",
			Handler:    _BikeService_CreateLockerBikeConn_Handler,
		},
		{
			MethodName: "UpdateBikeCategory",
			Handler:    _BikeService_UpdateBikeCategory_Handler,
		},
		{
			MethodName: "UpdateBike",
			Handler:    _BikeService_UpdateBike_Handler,
		},
		{
			MethodName: "UpdateBikeStation",
			Handler:    _BikeService_UpdateBikeStation_Handler,
		},
		{
			MethodName: "UpdateLockerBikeConn",
			Handler:    _BikeService_UpdateLockerBikeConn_Handler,
		},
		{
			MethodName: "DeleteBikeCategory",
			Handler:    _BikeService_DeleteBikeCategory_Handler,
		},
		{
			MethodName: "DeleteBike",
			Handler:    _BikeService_DeleteBike_Handler,
		},
		{
			MethodName: "DeleteBikeStation",
			Handler:    _BikeService_DeleteBikeStation_Handler,
		},
		{
			MethodName: "DeleteLockerBikeConn",
			Handler:    _BikeService_DeleteLockerBikeConn_Handler,
		},
		{
			MethodName: "GetBikeFullInfo",
			Handler:    _BikeService_GetBikeFullInfo_Handler,
		},
		{
			MethodName: "GetBikeFullInfoList",
			Handler:    _BikeService_GetBikeFullInfoList_Handler,
		},
		{
			MethodName: "GetBike",
			Handler:    _BikeService_GetBike_Handler,
		},
		{
			MethodName: "GetBikeCategory",
			Handler:    _BikeService_GetBikeCategory_Handler,
		},
		{
			MethodName: "GetBikeStation",
			Handler:    _BikeService_GetBikeStation_Handler,
		},
		{
			MethodName: "GetBikeList",
			Handler:    _BikeService_GetBikeList_Handler,
		},
		{
			MethodName: "GetBikeCategoryList",
			Handler:    _BikeService_GetBikeCategoryList_Handler,
		},
		{
			MethodName: "GetBikeStationList",
			Handler:    _BikeService_GetBikeStationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bike/bike.proto",
}

func (m *LockerBikeConnID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerBikeConnID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerBikeConnID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *LockerBikeConnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerBikeConnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerBikeConnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BikeID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.BikeID))
		i--
		dAtA[i] = 0x18
	}
	if m.LockerID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.LockerID))
		i--
		dAtA[i] = 0x10
	}
	if m.ScanID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ScanID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerBikeConnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerBikeConnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerBikeConnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBike(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBike(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BikeID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.BikeID))
		i--
		dAtA[i] = 0x20
	}
	if m.LockerID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.LockerID))
		i--
		dAtA[i] = 0x18
	}
	if m.ScanID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ScanID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBike(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBike(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBike(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x15
	}
	if m.ID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBike(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x15
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *BikeCategoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeCategoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeCategoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BikeType) > 0 {
		i -= len(m.BikeType)
		copy(dAtA[i:], m.BikeType)
		i = encodeVarintBike(dAtA, i, uint64(len(m.BikeType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ImagePath) > 0 {
		i -= len(m.ImagePath)
		copy(dAtA[i:], m.ImagePath)
		i = encodeVarintBike(dAtA, i, uint64(len(m.ImagePath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BikeCategoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeCategoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeCategoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBike(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBike(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BikeType) > 0 {
		i -= len(m.BikeType)
		copy(dAtA[i:], m.BikeType)
		i = encodeVarintBike(dAtA, i, uint64(len(m.BikeType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ImagePath) > 0 {
		i -= len(m.ImagePath)
		copy(dAtA[i:], m.ImagePath)
		i = encodeVarintBike(dAtA, i, uint64(len(m.ImagePath)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBike(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.CategoryId != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.CategoryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BikeCategoryID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeCategoryID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeCategoryID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BikeID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StationID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StationID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StationID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stations) > 0 {
		for iNdEx := len(m.Stations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBike(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BikeCategoryList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeCategoryList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeCategoryList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BikeCategories) > 0 {
		for iNdEx := len(m.BikeCategories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BikeCategories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBike(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BikeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bikes) > 0 {
		for iNdEx := len(m.Bikes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bikes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBike(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BikeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBike(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBike(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsBroken {
		i--
		if m.IsBroken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBike(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CategoryId != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.CategoryId))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BikeFullInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeFullInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeFullInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BikesInfo) > 0 {
		for iNdEx := len(m.BikesInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BikesInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBike(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BikeFullInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BikeFullInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BikeFullInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImagePath) > 0 {
		i -= len(m.ImagePath)
		copy(dAtA[i:], m.ImagePath)
		i = encodeVarintBike(dAtA, i, uint64(len(m.ImagePath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBike(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBike(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintBike(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBike(dAtA []byte, offset int, v uint64) int {
	offset -= sovBike(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockerBikeConnID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBike(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerBikeConnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanID != 0 {
		n += 1 + sovBike(uint64(m.ScanID))
	}
	if m.LockerID != 0 {
		n += 1 + sovBike(uint64(m.LockerID))
	}
	if m.BikeID != 0 {
		n += 1 + sovBike(uint64(m.BikeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerBikeConnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBike(uint64(m.ID))
	}
	if m.ScanID != 0 {
		n += 1 + sovBike(uint64(m.ScanID))
	}
	if m.LockerID != 0 {
		n += 1 + sovBike(uint64(m.LockerID))
	}
	if m.BikeID != 0 {
		n += 1 + sovBike(uint64(m.BikeID))
	}
	if m.IsActive {
		n += 2
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBike(uint64(m.ID))
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.Latitude != 0 {
		n += 5
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Longitude != 0 {
		n += 5
	}
	if m.Latitude != 0 {
		n += 5
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeCategoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.BikeType)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeCategoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBike(uint64(m.ID))
	}
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.BikeType)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CategoryId != 0 {
		n += 1 + sovBike(uint64(m.CategoryId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeCategoryID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBike(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBike(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StationID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBike(uint64(m.ID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stations) > 0 {
		for _, e := range m.Stations {
			l = e.Size()
			n += 1 + l + sovBike(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeCategoryList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BikeCategories) > 0 {
		for _, e := range m.BikeCategories {
			l = e.Size()
			n += 1 + l + sovBike(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bikes) > 0 {
		for _, e := range m.Bikes {
			l = e.Size()
			n += 1 + l + sovBike(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBike(uint64(m.ID))
	}
	if m.CategoryId != 0 {
		n += 1 + sovBike(uint64(m.CategoryId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	if m.IsBroken {
		n += 2
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeFullInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BikesInfo) > 0 {
		for _, e := range m.BikesInfo {
			l = e.Size()
			n += 1 + l + sovBike(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BikeFullInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBike(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovBike(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBike(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBike(x uint64) (n int) {
	return sovBike(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockerBikeConnID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerBikeConnID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerBikeConnID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerBikeConnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerBikeConnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerBikeConnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanID", wireType)
			}
			m.ScanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScanID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerID", wireType)
			}
			m.LockerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BikeID", wireType)
			}
			m.BikeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BikeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerBikeConnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerBikeConnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerBikeConnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanID", wireType)
			}
			m.ScanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScanID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerID", wireType)
			}
			m.LockerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BikeID", wireType)
			}
			m.BikeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BikeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeCategoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BikeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BikeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeCategoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BikeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BikeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeCategoryID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeCategoryID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeCategoryID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StationID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StationID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StationID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stations = append(m.Stations, &StationResponse{})
			if err := m.Stations[len(m.Stations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeCategoryList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeCategoryList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeCategoryList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BikeCategories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BikeCategories = append(m.BikeCategories, &BikeCategoryResponse{})
			if err := m.BikeCategories[len(m.BikeCategories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bikes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bikes = append(m.Bikes, &BikeResponse{})
			if err := m.Bikes[len(m.Bikes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryId", wireType)
			}
			m.CategoryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CategoryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBroken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBroken = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeFullInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeFullInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeFullInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BikesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BikesInfo = append(m.BikesInfo, &BikeFullInfoResponse{})
			if err := m.BikesInfo[len(m.BikesInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BikeFullInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBike
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BikeFullInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BikeFullInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBike
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBike
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBike
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBike(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBike
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBike(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBike
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBike
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBike
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBike
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBike
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBike        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBike          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBike = fmt.Errorf("proto: unexpected end of group")
)
