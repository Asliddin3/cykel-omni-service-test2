// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: locker/locker.proto

package locker

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LockerFullInfoList struct {
	LockersInfo          []*LockerFullInfoResponse `protobuf:"bytes,1,rep,name=LockersInfo,proto3" json:"LockersInfo"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *LockerFullInfoList) Reset()         { *m = LockerFullInfoList{} }
func (m *LockerFullInfoList) String() string { return proto.CompactTextString(m) }
func (*LockerFullInfoList) ProtoMessage()    {}
func (*LockerFullInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{0}
}
func (m *LockerFullInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerFullInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerFullInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerFullInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerFullInfoList.Merge(m, src)
}
func (m *LockerFullInfoList) XXX_Size() int {
	return m.Size()
}
func (m *LockerFullInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerFullInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_LockerFullInfoList proto.InternalMessageInfo

func (m *LockerFullInfoList) GetLockersInfo() []*LockerFullInfoResponse {
	if m != nil {
		return m.LockersInfo
	}
	return nil
}

type LockerList struct {
	Lockers              []*LockerCreateResponse `protobuf:"bytes,1,rep,name=Lockers,proto3" json:"Lockers"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LockerList) Reset()         { *m = LockerList{} }
func (m *LockerList) String() string { return proto.CompactTextString(m) }
func (*LockerList) ProtoMessage()    {}
func (*LockerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{1}
}
func (m *LockerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerList.Merge(m, src)
}
func (m *LockerList) XXX_Size() int {
	return m.Size()
}
func (m *LockerList) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerList.DiscardUnknown(m)
}

var xxx_messageInfo_LockerList proto.InternalMessageInfo

func (m *LockerList) GetLockers() []*LockerCreateResponse {
	if m != nil {
		return m.Lockers
	}
	return nil
}

type LockerFullInfoResponse struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	IMEI                 int64    `protobuf:"varint,2,opt,name=IMEI,proto3" json:"IMEI"`
	SimCard              int64    `protobuf:"varint,3,opt,name=SimCard,proto3" json:"SimCard"`
	Voltage              float32  `protobuf:"fixed32,4,opt,name=Voltage,proto3" json:"Voltage"`
	Signal               int32    `protobuf:"varint,5,opt,name=Signal,proto3" json:"Signal"`
	Sate                 int32    `protobuf:"varint,6,opt,name=Sate,proto3" json:"Sate"`
	AlarmStatus          string   `protobuf:"bytes,7,opt,name=AlarmStatus,proto3" json:"AlarmStatus"`
	LocationInterval     int64    `protobuf:"varint,8,opt,name=LocationInterval,proto3" json:"LocationInterval"`
	Longitude            float32  `protobuf:"fixed32,9,opt,name=Longitude,proto3" json:"Longitude"`
	Latitude             float32  `protobuf:"fixed32,10,opt,name=Latitude,proto3" json:"Latitude"`
	IsLocked             bool     `protobuf:"varint,11,opt,name=IsLocked,proto3" json:"IsLocked"`
	IsConnected          bool     `protobuf:"varint,12,opt,name=IsConnected,proto3" json:"IsConnected"`
	CreatedAt            string   `protobuf:"bytes,13,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	UpdatedAt            string   `protobuf:"bytes,14,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerFullInfoResponse) Reset()         { *m = LockerFullInfoResponse{} }
func (m *LockerFullInfoResponse) String() string { return proto.CompactTextString(m) }
func (*LockerFullInfoResponse) ProtoMessage()    {}
func (*LockerFullInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{2}
}
func (m *LockerFullInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerFullInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerFullInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerFullInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerFullInfoResponse.Merge(m, src)
}
func (m *LockerFullInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockerFullInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerFullInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockerFullInfoResponse proto.InternalMessageInfo

func (m *LockerFullInfoResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LockerFullInfoResponse) GetIMEI() int64 {
	if m != nil {
		return m.IMEI
	}
	return 0
}

func (m *LockerFullInfoResponse) GetSimCard() int64 {
	if m != nil {
		return m.SimCard
	}
	return 0
}

func (m *LockerFullInfoResponse) GetVoltage() float32 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *LockerFullInfoResponse) GetSignal() int32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

func (m *LockerFullInfoResponse) GetSate() int32 {
	if m != nil {
		return m.Sate
	}
	return 0
}

func (m *LockerFullInfoResponse) GetAlarmStatus() string {
	if m != nil {
		return m.AlarmStatus
	}
	return ""
}

func (m *LockerFullInfoResponse) GetLocationInterval() int64 {
	if m != nil {
		return m.LocationInterval
	}
	return 0
}

func (m *LockerFullInfoResponse) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *LockerFullInfoResponse) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *LockerFullInfoResponse) GetIsLocked() bool {
	if m != nil {
		return m.IsLocked
	}
	return false
}

func (m *LockerFullInfoResponse) GetIsConnected() bool {
	if m != nil {
		return m.IsConnected
	}
	return false
}

func (m *LockerFullInfoResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *LockerFullInfoResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type LockerCreateRequest struct {
	IMEI                 int64    `protobuf:"varint,1,opt,name=IMEI,proto3" json:"IMEI"`
	SimCard              int64    `protobuf:"varint,2,opt,name=SimCard,proto3" json:"SimCard"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerCreateRequest) Reset()         { *m = LockerCreateRequest{} }
func (m *LockerCreateRequest) String() string { return proto.CompactTextString(m) }
func (*LockerCreateRequest) ProtoMessage()    {}
func (*LockerCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{3}
}
func (m *LockerCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerCreateRequest.Merge(m, src)
}
func (m *LockerCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockerCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockerCreateRequest proto.InternalMessageInfo

func (m *LockerCreateRequest) GetIMEI() int64 {
	if m != nil {
		return m.IMEI
	}
	return 0
}

func (m *LockerCreateRequest) GetSimCard() int64 {
	if m != nil {
		return m.SimCard
	}
	return 0
}

type LockerCreateResponse struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID"`
	IMEI                 int64    `protobuf:"varint,2,opt,name=IMEI,proto3" json:"IMEI"`
	SimCard              int64    `protobuf:"varint,3,opt,name=SimCard,proto3" json:"SimCard"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerCreateResponse) Reset()         { *m = LockerCreateResponse{} }
func (m *LockerCreateResponse) String() string { return proto.CompactTextString(m) }
func (*LockerCreateResponse) ProtoMessage()    {}
func (*LockerCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{4}
}
func (m *LockerCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerCreateResponse.Merge(m, src)
}
func (m *LockerCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockerCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockerCreateResponse proto.InternalMessageInfo

func (m *LockerCreateResponse) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LockerCreateResponse) GetIMEI() int64 {
	if m != nil {
		return m.IMEI
	}
	return 0
}

func (m *LockerCreateResponse) GetSimCard() int64 {
	if m != nil {
		return m.SimCard
	}
	return 0
}

type LockerInfoResponse struct {
	Voltage              float32  `protobuf:"fixed32,1,opt,name=Voltage,proto3" json:"Voltage"`
	Signal               int32    `protobuf:"varint,2,opt,name=Signal,proto3" json:"Signal"`
	GPSsate              int32    `protobuf:"varint,3,opt,name=GPSsate,proto3" json:"GPSsate"`
	IsLocked             bool     `protobuf:"varint,4,opt,name=IsLocked,proto3" json:"IsLocked"`
	Retention            int64    `protobuf:"varint,5,opt,name=Retention,proto3" json:"Retention"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	UpdatedAt            string   `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerInfoResponse) Reset()         { *m = LockerInfoResponse{} }
func (m *LockerInfoResponse) String() string { return proto.CompactTextString(m) }
func (*LockerInfoResponse) ProtoMessage()    {}
func (*LockerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{5}
}
func (m *LockerInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerInfoResponse.Merge(m, src)
}
func (m *LockerInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockerInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockerInfoResponse proto.InternalMessageInfo

func (m *LockerInfoResponse) GetVoltage() float32 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *LockerInfoResponse) GetSignal() int32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

func (m *LockerInfoResponse) GetGPSsate() int32 {
	if m != nil {
		return m.GPSsate
	}
	return 0
}

func (m *LockerInfoResponse) GetIsLocked() bool {
	if m != nil {
		return m.IsLocked
	}
	return false
}

func (m *LockerInfoResponse) GetRetention() int64 {
	if m != nil {
		return m.Retention
	}
	return 0
}

func (m *LockerInfoResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *LockerInfoResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type FirmwareInfoResponse struct {
	DeviceInfo           string   `protobuf:"bytes,1,opt,name=DeviceInfo,proto3" json:"DeviceInfo"`
	DeviceDate           string   `protobuf:"bytes,2,opt,name=DeviceDate,proto3" json:"DeviceDate"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirmwareInfoResponse) Reset()         { *m = FirmwareInfoResponse{} }
func (m *FirmwareInfoResponse) String() string { return proto.CompactTextString(m) }
func (*FirmwareInfoResponse) ProtoMessage()    {}
func (*FirmwareInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{6}
}
func (m *FirmwareInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirmwareInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirmwareInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirmwareInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwareInfoResponse.Merge(m, src)
}
func (m *FirmwareInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *FirmwareInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwareInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwareInfoResponse proto.InternalMessageInfo

func (m *FirmwareInfoResponse) GetDeviceInfo() string {
	if m != nil {
		return m.DeviceInfo
	}
	return ""
}

func (m *FirmwareInfoResponse) GetDeviceDate() string {
	if m != nil {
		return m.DeviceDate
	}
	return ""
}

type SimCardResponse struct {
	SIMCARD              int64    `protobuf:"varint,1,opt,name=SIMCARD,proto3" json:"SIMCARD"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimCardResponse) Reset()         { *m = SimCardResponse{} }
func (m *SimCardResponse) String() string { return proto.CompactTextString(m) }
func (*SimCardResponse) ProtoMessage()    {}
func (*SimCardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{7}
}
func (m *SimCardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimCardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimCardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimCardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimCardResponse.Merge(m, src)
}
func (m *SimCardResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimCardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimCardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimCardResponse proto.InternalMessageInfo

func (m *SimCardResponse) GetSIMCARD() int64 {
	if m != nil {
		return m.SIMCARD
	}
	return 0
}

type LockerID struct {
	LockerID             int64    `protobuf:"varint,1,opt,name=LockerID,proto3" json:"LockerID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerID) Reset()         { *m = LockerID{} }
func (m *LockerID) String() string { return proto.CompactTextString(m) }
func (*LockerID) ProtoMessage()    {}
func (*LockerID) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{8}
}
func (m *LockerID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerID.Merge(m, src)
}
func (m *LockerID) XXX_Size() int {
	return m.Size()
}
func (m *LockerID) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerID.DiscardUnknown(m)
}

var xxx_messageInfo_LockerID proto.InternalMessageInfo

func (m *LockerID) GetLockerID() int64 {
	if m != nil {
		return m.LockerID
	}
	return 0
}

type LocationIntervalResponse struct {
	SetInterval          int64    `protobuf:"varint,1,opt,name=SetInterval,proto3" json:"SetInterval"`
	UpdatedAt            string   `protobuf:"bytes,2,opt,name=UpdatedAt,proto3" json:"UpdatedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationIntervalResponse) Reset()         { *m = LocationIntervalResponse{} }
func (m *LocationIntervalResponse) String() string { return proto.CompactTextString(m) }
func (*LocationIntervalResponse) ProtoMessage()    {}
func (*LocationIntervalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{9}
}
func (m *LocationIntervalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationIntervalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationIntervalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationIntervalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationIntervalResponse.Merge(m, src)
}
func (m *LocationIntervalResponse) XXX_Size() int {
	return m.Size()
}
func (m *LocationIntervalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationIntervalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LocationIntervalResponse proto.InternalMessageInfo

func (m *LocationIntervalResponse) GetSetInterval() int64 {
	if m != nil {
		return m.SetInterval
	}
	return 0
}

func (m *LocationIntervalResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type LocationIntervalRequest struct {
	LockerID             int64    `protobuf:"varint,1,opt,name=LockerID,proto3" json:"LockerID"`
	IntervalInSecond     int64    `protobuf:"varint,2,opt,name=IntervalInSecond,proto3" json:"IntervalInSecond"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationIntervalRequest) Reset()         { *m = LocationIntervalRequest{} }
func (m *LocationIntervalRequest) String() string { return proto.CompactTextString(m) }
func (*LocationIntervalRequest) ProtoMessage()    {}
func (*LocationIntervalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{10}
}
func (m *LocationIntervalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationIntervalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationIntervalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationIntervalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationIntervalRequest.Merge(m, src)
}
func (m *LocationIntervalRequest) XXX_Size() int {
	return m.Size()
}
func (m *LocationIntervalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationIntervalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LocationIntervalRequest proto.InternalMessageInfo

func (m *LocationIntervalRequest) GetLockerID() int64 {
	if m != nil {
		return m.LockerID
	}
	return 0
}

func (m *LocationIntervalRequest) GetIntervalInSecond() int64 {
	if m != nil {
		return m.IntervalInSecond
	}
	return 0
}

type LockerRequest struct {
	LockerIMEI           int64    `protobuf:"varint,1,opt,name=LockerIMEI,proto3" json:"LockerIMEI"`
	LockerMessage        string   `protobuf:"bytes,2,opt,name=LockerMessage,proto3" json:"LockerMessage"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerRequest) Reset()         { *m = LockerRequest{} }
func (m *LockerRequest) String() string { return proto.CompactTextString(m) }
func (*LockerRequest) ProtoMessage()    {}
func (*LockerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{11}
}
func (m *LockerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerRequest.Merge(m, src)
}
func (m *LockerRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockerRequest proto.InternalMessageInfo

func (m *LockerRequest) GetLockerIMEI() int64 {
	if m != nil {
		return m.LockerIMEI
	}
	return 0
}

func (m *LockerRequest) GetLockerMessage() string {
	if m != nil {
		return m.LockerMessage
	}
	return ""
}

type LockerStreamResponse struct {
	StreamMessage        string   `protobuf:"bytes,2,opt,name=StreamMessage,proto3" json:"StreamMessage"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockerStreamResponse) Reset()         { *m = LockerStreamResponse{} }
func (m *LockerStreamResponse) String() string { return proto.CompactTextString(m) }
func (*LockerStreamResponse) ProtoMessage()    {}
func (*LockerStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{12}
}
func (m *LockerStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockerStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockerStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockerStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockerStreamResponse.Merge(m, src)
}
func (m *LockerStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockerStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockerStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockerStreamResponse proto.InternalMessageInfo

func (m *LockerStreamResponse) GetStreamMessage() string {
	if m != nil {
		return m.StreamMessage
	}
	return ""
}

type LocationRequest struct {
	LockerID             int64    `protobuf:"varint,1,opt,name=LockerID,proto3" json:"LockerID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationRequest) Reset()         { *m = LocationRequest{} }
func (m *LocationRequest) String() string { return proto.CompactTextString(m) }
func (*LocationRequest) ProtoMessage()    {}
func (*LocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{13}
}
func (m *LocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationRequest.Merge(m, src)
}
func (m *LocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *LocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LocationRequest proto.InternalMessageInfo

func (m *LocationRequest) GetLockerID() int64 {
	if m != nil {
		return m.LockerID
	}
	return 0
}

type LocationResponse struct {
	LockerID             int64    `protobuf:"varint,1,opt,name=LockerID,proto3" json:"LockerID"`
	IsTracking           bool     `protobuf:"varint,2,opt,name=IsTracking,proto3" json:"IsTracking"`
	UTCtime              string   `protobuf:"bytes,3,opt,name=UTCtime,proto3" json:"UTCtime"`
	IsValid              bool     `protobuf:"varint,4,opt,name=IsValid,proto3" json:"IsValid"`
	Latitude             float32  `protobuf:"fixed32,5,opt,name=Latitude,proto3" json:"Latitude"`
	IsNorth              bool     `protobuf:"varint,6,opt,name=IsNorth,proto3" json:"IsNorth"`
	Longitude            float32  `protobuf:"fixed32,7,opt,name=Longitude,proto3" json:"Longitude"`
	IsEast               bool     `protobuf:"varint,8,opt,name=IsEast,proto3" json:"IsEast"`
	CountSate            int32    `protobuf:"varint,9,opt,name=CountSate,proto3" json:"CountSate"`
	PositionAccuracy     float32  `protobuf:"fixed32,10,opt,name=PositionAccuracy,proto3" json:"PositionAccuracy"`
	UTCdate              string   `protobuf:"bytes,11,opt,name=UTCdate,proto3" json:"UTCdate"`
	Altitude             float32  `protobuf:"fixed32,12,opt,name=Altitude,proto3" json:"Altitude"`
	HeightUnit           string   `protobuf:"bytes,13,opt,name=HeightUnit,proto3" json:"HeightUnit"`
	ModeIndication       string   `protobuf:"bytes,14,opt,name=ModeIndication,proto3" json:"ModeIndication"`
	CreatedAt            string   `protobuf:"bytes,15,opt,name=CreatedAt,proto3" json:"CreatedAt"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationResponse) Reset()         { *m = LocationResponse{} }
func (m *LocationResponse) String() string { return proto.CompactTextString(m) }
func (*LocationResponse) ProtoMessage()    {}
func (*LocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{14}
}
func (m *LocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationResponse.Merge(m, src)
}
func (m *LocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *LocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LocationResponse proto.InternalMessageInfo

func (m *LocationResponse) GetLockerID() int64 {
	if m != nil {
		return m.LockerID
	}
	return 0
}

func (m *LocationResponse) GetIsTracking() bool {
	if m != nil {
		return m.IsTracking
	}
	return false
}

func (m *LocationResponse) GetUTCtime() string {
	if m != nil {
		return m.UTCtime
	}
	return ""
}

func (m *LocationResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *LocationResponse) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *LocationResponse) GetIsNorth() bool {
	if m != nil {
		return m.IsNorth
	}
	return false
}

func (m *LocationResponse) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *LocationResponse) GetIsEast() bool {
	if m != nil {
		return m.IsEast
	}
	return false
}

func (m *LocationResponse) GetCountSate() int32 {
	if m != nil {
		return m.CountSate
	}
	return 0
}

func (m *LocationResponse) GetPositionAccuracy() float32 {
	if m != nil {
		return m.PositionAccuracy
	}
	return 0
}

func (m *LocationResponse) GetUTCdate() string {
	if m != nil {
		return m.UTCdate
	}
	return ""
}

func (m *LocationResponse) GetAltitude() float32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *LocationResponse) GetHeightUnit() string {
	if m != nil {
		return m.HeightUnit
	}
	return ""
}

func (m *LocationResponse) GetModeIndication() string {
	if m != nil {
		return m.ModeIndication
	}
	return ""
}

func (m *LocationResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{15}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type UnlockResponse struct {
	UnlockResult         bool     `protobuf:"varint,1,opt,name=UnlockResult,proto3" json:"UnlockResult"`
	UserID               int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID"`
	UnlockedTime         int64    `protobuf:"varint,3,opt,name=UnlockedTime,proto3" json:"UnlockedTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockResponse) Reset()         { *m = UnlockResponse{} }
func (m *UnlockResponse) String() string { return proto.CompactTextString(m) }
func (*UnlockResponse) ProtoMessage()    {}
func (*UnlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{16}
}
func (m *UnlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockResponse.Merge(m, src)
}
func (m *UnlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *UnlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockResponse proto.InternalMessageInfo

func (m *UnlockResponse) GetUnlockResult() bool {
	if m != nil {
		return m.UnlockResult
	}
	return false
}

func (m *UnlockResponse) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UnlockResponse) GetUnlockedTime() int64 {
	if m != nil {
		return m.UnlockedTime
	}
	return 0
}

type UnlockRequest struct {
	ScanId               int64    `protobuf:"varint,1,opt,name=ScanId,proto3" json:"ScanId"`
	UserID               int64    `protobuf:"varint,2,opt,name=UserID,proto3" json:"UserID"`
	ResetTime            bool     `protobuf:"varint,3,opt,name=ResetTime,proto3" json:"ResetTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlockRequest) Reset()         { *m = UnlockRequest{} }
func (m *UnlockRequest) String() string { return proto.CompactTextString(m) }
func (*UnlockRequest) ProtoMessage()    {}
func (*UnlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c8ee7c4da0abb1, []int{17}
}
func (m *UnlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockRequest.Merge(m, src)
}
func (m *UnlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockRequest proto.InternalMessageInfo

func (m *UnlockRequest) GetScanId() int64 {
	if m != nil {
		return m.ScanId
	}
	return 0
}

func (m *UnlockRequest) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UnlockRequest) GetResetTime() bool {
	if m != nil {
		return m.ResetTime
	}
	return false
}

func init() {
	proto.RegisterType((*LockerFullInfoList)(nil), "locker.LockerFullInfoList")
	proto.RegisterType((*LockerList)(nil), "locker.LockerList")
	proto.RegisterType((*LockerFullInfoResponse)(nil), "locker.LockerFullInfoResponse")
	proto.RegisterType((*LockerCreateRequest)(nil), "locker.LockerCreateRequest")
	proto.RegisterType((*LockerCreateResponse)(nil), "locker.LockerCreateResponse")
	proto.RegisterType((*LockerInfoResponse)(nil), "locker.LockerInfoResponse")
	proto.RegisterType((*FirmwareInfoResponse)(nil), "locker.FirmwareInfoResponse")
	proto.RegisterType((*SimCardResponse)(nil), "locker.SimCardResponse")
	proto.RegisterType((*LockerID)(nil), "locker.LockerID")
	proto.RegisterType((*LocationIntervalResponse)(nil), "locker.LocationIntervalResponse")
	proto.RegisterType((*LocationIntervalRequest)(nil), "locker.LocationIntervalRequest")
	proto.RegisterType((*LockerRequest)(nil), "locker.LockerRequest")
	proto.RegisterType((*LockerStreamResponse)(nil), "locker.LockerStreamResponse")
	proto.RegisterType((*LocationRequest)(nil), "locker.LocationRequest")
	proto.RegisterType((*LocationResponse)(nil), "locker.LocationResponse")
	proto.RegisterType((*Empty)(nil), "locker.Empty")
	proto.RegisterType((*UnlockResponse)(nil), "locker.UnlockResponse")
	proto.RegisterType((*UnlockRequest)(nil), "locker.UnlockRequest")
}

func init() { proto.RegisterFile("locker/locker.proto", fileDescriptor_33c8ee7c4da0abb1) }

var fileDescriptor_33c8ee7c4da0abb1 = []byte{
	// 1130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x2e, 0x25, 0x5b, 0x8f, 0xd1, 0xc3, 0xee, 0xc6, 0xb1, 0x09, 0xc5, 0x50, 0x05, 0x22, 0x08,
	0x84, 0x16, 0x4d, 0x52, 0x17, 0x68, 0x0e, 0x69, 0x81, 0x2a, 0x92, 0xed, 0x32, 0x90, 0x8b, 0x80,
	0xb4, 0x7c, 0x28, 0x50, 0xa0, 0x2c, 0xb9, 0x95, 0x89, 0x50, 0xa4, 0x4a, 0xae, 0x12, 0xf8, 0x9f,
	0xf4, 0xd4, 0xdf, 0xd3, 0x63, 0x0f, 0x45, 0xaf, 0x2d, 0xdc, 0x3f, 0x52, 0xec, 0x53, 0x5c, 0xea,
	0x61, 0xe7, 0x64, 0xcd, 0x37, 0x3b, 0xb3, 0xbb, 0xf3, 0xcd, 0x7c, 0x5c, 0xc3, 0x83, 0x28, 0xf1,
	0xdf, 0xe2, 0xf4, 0x19, 0xff, 0xf3, 0x74, 0x9e, 0x26, 0x24, 0x41, 0x15, 0x6e, 0x59, 0x57, 0x80,
	0xc6, 0xec, 0xd7, 0xd9, 0x22, 0x8a, 0xec, 0xf8, 0x97, 0x64, 0x1c, 0x66, 0x04, 0x7d, 0x0b, 0x0d,
	0x8e, 0x66, 0x14, 0x32, 0x8d, 0x5e, 0xb9, 0xdf, 0x38, 0xe9, 0x3e, 0x15, 0x19, 0xf4, 0x00, 0x07,
	0x67, 0xf3, 0x24, 0xce, 0xb0, 0x93, 0x0f, 0xb1, 0x46, 0x00, 0xdc, 0x64, 0xf9, 0xbe, 0x82, 0xaa,
	0x70, 0x8a, 0x5c, 0xc7, 0x7a, 0xae, 0x61, 0x8a, 0x3d, 0x82, 0x55, 0x26, 0xb9, 0xd8, 0xfa, 0xbd,
	0x0c, 0x87, 0xeb, 0x77, 0x43, 0x6d, 0x28, 0xd9, 0x81, 0x69, 0xf4, 0x8c, 0x7e, 0xd9, 0x29, 0xd9,
	0x01, 0x42, 0xb0, 0x63, 0x5f, 0x9c, 0xda, 0x66, 0x89, 0x21, 0xec, 0x37, 0x32, 0xa1, 0xea, 0x86,
	0xb3, 0xa1, 0x97, 0x06, 0x66, 0x99, 0xc1, 0xd2, 0xa4, 0x9e, 0xab, 0x24, 0x22, 0xde, 0x14, 0x9b,
	0x3b, 0x3d, 0xa3, 0x5f, 0x72, 0xa4, 0x89, 0x0e, 0xa1, 0xe2, 0x86, 0xd3, 0xd8, 0x8b, 0xcc, 0xdd,
	0x9e, 0xd1, 0xdf, 0x75, 0x84, 0x45, 0xf3, 0xbb, 0x1e, 0xc1, 0x66, 0x85, 0xa1, 0xec, 0x37, 0xea,
	0x41, 0x63, 0x10, 0x79, 0xe9, 0xcc, 0x25, 0x1e, 0x59, 0x64, 0x66, 0xb5, 0x67, 0xf4, 0xeb, 0x4e,
	0x1e, 0x42, 0x9f, 0xc2, 0xfe, 0x38, 0xf1, 0x3d, 0x12, 0x26, 0xb1, 0x1d, 0x13, 0x9c, 0xbe, 0xf3,
	0x22, 0xb3, 0xc6, 0x8e, 0xb2, 0x82, 0xa3, 0x63, 0xa8, 0x8f, 0x93, 0x78, 0x1a, 0x92, 0x45, 0x80,
	0xcd, 0x3a, 0x3b, 0xd5, 0x12, 0x40, 0x1d, 0xa8, 0x8d, 0x3d, 0xc2, 0x9d, 0xc0, 0x9c, 0xca, 0xa6,
	0x3e, 0x3b, 0x63, 0x75, 0x0a, 0xcc, 0x46, 0xcf, 0xe8, 0xd7, 0x1c, 0x65, 0xd3, 0x33, 0xda, 0xd9,
	0x30, 0x89, 0x63, 0xec, 0x13, 0x1c, 0x98, 0x4d, 0xe6, 0xce, 0x43, 0x74, 0x5f, 0x5e, 0xff, 0x60,
	0x40, 0xcc, 0x16, 0xbb, 0xc3, 0x12, 0xa0, 0xde, 0xc9, 0x3c, 0x10, 0xde, 0x36, 0xf7, 0x2a, 0xc0,
	0x1a, 0xc2, 0x03, 0x9d, 0xc1, 0x5f, 0x17, 0x38, 0x23, 0x8a, 0x0c, 0x63, 0x3d, 0x19, 0x25, 0x8d,
	0x0c, 0xeb, 0x12, 0x0e, 0xd6, 0xb5, 0x01, 0xa3, 0x78, 0xa4, 0x28, 0x1e, 0x7d, 0x18, 0xc5, 0xd6,
	0xdf, 0x86, 0x6c, 0x6d, 0xad, 0x6f, 0x72, 0xcc, 0x1b, 0x9b, 0x98, 0x2f, 0x69, 0xcc, 0x9b, 0x50,
	0x3d, 0x7f, 0xe3, 0x66, 0x94, 0xfc, 0x32, 0x73, 0x48, 0x53, 0xab, 0xfb, 0x4e, 0xa1, 0xee, 0xc7,
	0x50, 0x77, 0x30, 0xc1, 0x31, 0xa5, 0x98, 0xb5, 0x52, 0xd9, 0x59, 0x02, 0x7a, 0xcd, 0x2b, 0x5b,
	0x6b, 0x5e, 0x2d, 0xd6, 0xfc, 0x0a, 0x0e, 0xce, 0xc2, 0x74, 0xf6, 0xde, 0x4b, 0xb1, 0x76, 0xb3,
	0x2e, 0xc0, 0x08, 0xbf, 0x0b, 0x7d, 0x2c, 0x66, 0x96, 0x86, 0xe5, 0x90, 0xa5, 0x7f, 0x44, 0xaf,
	0x52, 0xca, 0xfb, 0x29, 0x62, 0x7d, 0x06, 0x7b, 0xa2, 0x76, 0xf9, 0x62, 0xb9, 0xf6, 0xc5, 0x70,
	0xe0, 0x48, 0x1a, 0xa4, 0x69, 0x3d, 0x81, 0x9a, 0x28, 0xee, 0x88, 0xb5, 0xa6, 0xf8, 0x2d, 0x96,
	0x29, 0xdb, 0xfa, 0x01, 0xcc, 0x62, 0xa3, 0xab, 0xec, 0x3d, 0x68, 0xb8, 0x98, 0xa8, 0xb9, 0xe0,
	0xa1, 0x79, 0x48, 0x2f, 0x44, 0xa9, 0x58, 0x08, 0x0f, 0x8e, 0x56, 0x73, 0xf3, 0x06, 0xdc, 0x72,
	0x24, 0x3a, 0x93, 0x72, 0xb9, 0x1d, 0xbb, 0xd8, 0x4f, 0x62, 0xd9, 0x91, 0x2b, 0xb8, 0x35, 0x81,
	0x16, 0x8f, 0x93, 0x89, 0xbb, 0x52, 0xd7, 0x72, 0xfd, 0x9d, 0x43, 0xd0, 0x63, 0x19, 0x70, 0x81,
	0xb3, 0x8c, 0x36, 0x19, 0x3f, 0xb5, 0x0e, 0x5a, 0x5f, 0xcb, 0x8e, 0x77, 0x49, 0x8a, 0xbd, 0x99,
	0xaa, 0xc8, 0x63, 0x68, 0x71, 0xa4, 0x10, 0xad, 0x81, 0xd6, 0xe7, 0xb0, 0x27, 0xef, 0x7d, 0x8f,
	0xfb, 0x5a, 0x7f, 0x95, 0x97, 0x22, 0xa4, 0x76, 0xda, 0x56, 0xa0, 0x2e, 0x80, 0x9d, 0x5d, 0xa6,
	0x9e, 0xff, 0x36, 0x8c, 0xa7, 0xec, 0x08, 0x35, 0x27, 0x87, 0xd0, 0xae, 0x98, 0x5c, 0x0e, 0x49,
	0x38, 0xe3, 0x03, 0x51, 0x77, 0xa4, 0x49, 0x3d, 0x76, 0x76, 0xe5, 0x45, 0xa1, 0x9c, 0x07, 0x69,
	0x6a, 0xf2, 0xb5, 0x5b, 0x90, 0x2f, 0x16, 0xf5, 0x7d, 0x92, 0x92, 0x6b, 0x36, 0x0a, 0x2c, 0x8a,
	0x99, 0xba, 0x24, 0x56, 0x8b, 0x92, 0x78, 0x08, 0x15, 0x3b, 0x3b, 0xf5, 0x32, 0xc2, 0x24, 0xb5,
	0xe6, 0x08, 0x8b, 0x0d, 0x57, 0xb2, 0x88, 0x09, 0xd3, 0xeb, 0x3a, 0x1b, 0xd9, 0x25, 0x40, 0xe9,
	0x7f, 0x93, 0x64, 0x21, 0xad, 0xc6, 0xc0, 0xf7, 0x17, 0xa9, 0xe7, 0xdf, 0x08, 0x41, 0x5d, 0xc1,
	0xc5, 0x4d, 0x69, 0xbf, 0x31, 0x5d, 0xe5, 0x37, 0x0d, 0xc4, 0xe8, 0x0f, 0x22, 0x71, 0x9f, 0x26,
	0xbf, 0x8f, 0xb4, 0x69, 0xfd, 0xbe, 0xc3, 0xe1, 0xf4, 0x9a, 0x4c, 0xe2, 0x50, 0x2a, 0x6a, 0x0e,
	0x41, 0x4f, 0xa0, 0x7d, 0x91, 0x04, 0xd8, 0x8e, 0x83, 0x90, 0xb3, 0x22, 0x74, 0xb5, 0x80, 0xea,
	0x22, 0xb1, 0x57, 0x10, 0x09, 0xab, 0x0a, 0xbb, 0xa7, 0xb3, 0x39, 0xb9, 0xb1, 0xe6, 0xd0, 0x9e,
	0xc4, 0xf4, 0x73, 0xaa, 0xc8, 0xb5, 0xa0, 0xa9, 0x90, 0x45, 0x44, 0x18, 0xc1, 0x35, 0x47, 0xc3,
	0x68, 0xf1, 0x26, 0x19, 0xa3, 0x9f, 0xf7, 0xbe, 0xb0, 0x96, 0xb1, 0x38, 0xb8, 0x94, 0x0c, 0x97,
	0x1d, 0x0d, 0xb3, 0x7e, 0x84, 0x96, 0xcc, 0xc5, 0xdb, 0x8f, 0x4a, 0xa7, 0xef, 0xc5, 0xea, 0x83,
	0x2c, 0xac, 0x8d, 0x9b, 0x30, 0x71, 0xcc, 0x30, 0x51, 0x3b, 0xd4, 0x9c, 0x25, 0x70, 0xf2, 0x4f,
	0x4d, 0x0e, 0x91, 0x8b, 0x53, 0x2a, 0x4f, 0xc8, 0x86, 0x26, 0xbf, 0x38, 0x87, 0xd1, 0xa3, 0xf5,
	0xcf, 0x07, 0x76, 0x98, 0xce, 0xd6, 0xb7, 0x05, 0x7a, 0x0d, 0x4d, 0xae, 0x20, 0x22, 0xd5, 0xd6,
	0xd5, 0x77, 0xe4, 0x7a, 0x06, 0xcd, 0x11, 0x8e, 0xb0, 0xca, 0xb5, 0xaf, 0xaf, 0xb6, 0x47, 0x9d,
	0x96, 0x44, 0x18, 0x55, 0xe8, 0x05, 0x1c, 0xe4, 0x03, 0xe4, 0x54, 0xde, 0x1d, 0xf8, 0x12, 0xea,
	0xe7, 0x98, 0x6c, 0xdc, 0x66, 0xfb, 0x31, 0x4f, 0xe1, 0x63, 0x15, 0x2c, 0xdf, 0x51, 0x6b, 0x92,
	0xdc, 0xf1, 0xbe, 0x43, 0x27, 0xd0, 0x52, 0x69, 0xd8, 0xab, 0x4e, 0x3f, 0x63, 0x07, 0xe9, 0xf1,
	0x6c, 0xc9, 0x2b, 0x78, 0xb8, 0xb2, 0xf5, 0xba, 0xd8, 0xce, 0xfa, 0xbd, 0xd9, 0xd2, 0xd7, 0x4c,
	0xee, 0x94, 0x58, 0x52, 0x05, 0x7a, 0xa8, 0x2f, 0xdf, 0xc0, 0xbc, 0x2e, 0xae, 0x7d, 0xe3, 0xb9,
	0x81, 0xbe, 0x91, 0xdd, 0x2d, 0x4a, 0xa9, 0x12, 0x69, 0xfd, 0xdc, 0x39, 0x2c, 0xc2, 0xa2, 0x04,
	0x3f, 0xc1, 0x23, 0x97, 0x5d, 0x87, 0xd1, 0x26, 0x05, 0x51, 0x7d, 0xae, 0x3e, 0xc9, 0xed, 0xbf,
	0xee, 0xb3, 0xd4, 0xe9, 0x6d, 0x5e, 0x20, 0x76, 0x78, 0x01, 0x70, 0x8e, 0x89, 0x7c, 0xa6, 0xae,
	0x92, 0x74, 0x24, 0x91, 0xe2, 0xa7, 0xfa, 0x2c, 0x47, 0xb2, 0xea, 0xab, 0xa3, 0xe2, 0x7e, 0xf2,
	0x20, 0xe6, 0xaa, 0x43, 0xe4, 0x19, 0xc0, 0xde, 0x39, 0x26, 0xf9, 0x07, 0xc6, 0xb6, 0x7e, 0x5b,
	0xfb, 0x10, 0x79, 0x09, 0x0d, 0x71, 0x94, 0x0d, 0xe1, 0x05, 0xb6, 0xb5, 0xe0, 0x2f, 0xa0, 0xed,
	0x5e, 0x2f, 0xc8, 0x28, 0x79, 0x1f, 0xdf, 0x77, 0xaa, 0x9e, 0x43, 0xcb, 0xc1, 0x19, 0xf1, 0x52,
	0x72, 0xcf, 0x88, 0x57, 0xfb, 0x7f, 0xdc, 0x76, 0x8d, 0x3f, 0x6f, 0xbb, 0xc6, 0xbf, 0xb7, 0x5d,
	0xe3, 0xb7, 0xff, 0xba, 0x1f, 0xfd, 0x5c, 0x61, 0xff, 0x16, 0x7d, 0xf9, 0x7f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb0, 0xb7, 0x5b, 0x15, 0x2d, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LockerServiceClient is the client API for LockerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LockerServiceClient interface {
	CreateLocker(ctx context.Context, in *LockerCreateRequest, opts ...grpc.CallOption) (*LockerCreateResponse, error)
	UpdateLocker(ctx context.Context, in *LockerCreateResponse, opts ...grpc.CallOption) (*LockerCreateResponse, error)
	DeleteLocker(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*Empty, error)
	DeleteLockerLocation(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*Empty, error)
	GetLocker(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*LockerCreateResponse, error)
	GetLockerFullInfo(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*LockerFullInfoResponse, error)
	GetLockerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LockerList, error)
	GetLockerFullInfoList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LockerFullInfoList, error)
	LockerStreaming(ctx context.Context, opts ...grpc.CallOption) (LockerService_LockerStreamingClient, error)
	UnlockLocker(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	SetLocationTrackingInterval(ctx context.Context, in *LocationIntervalRequest, opts ...grpc.CallOption) (*LocationIntervalResponse, error)
	GetSimCard(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*SimCardResponse, error)
	GetLockerLocation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
	GetFirmwareInfo(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*FirmwareInfoResponse, error)
	GetLockInfo(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*LockerInfoResponse, error)
	ShutDownLocker(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*Empty, error)
	RestartLocker(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*Empty, error)
}

type lockerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLockerServiceClient(cc *grpc.ClientConn) LockerServiceClient {
	return &lockerServiceClient{cc}
}

func (c *lockerServiceClient) CreateLocker(ctx context.Context, in *LockerCreateRequest, opts ...grpc.CallOption) (*LockerCreateResponse, error) {
	out := new(LockerCreateResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/CreateLocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) UpdateLocker(ctx context.Context, in *LockerCreateResponse, opts ...grpc.CallOption) (*LockerCreateResponse, error) {
	out := new(LockerCreateResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/UpdateLocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) DeleteLocker(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/locker.LockerService/DeleteLocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) DeleteLockerLocation(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/locker.LockerService/DeleteLockerLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) GetLocker(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*LockerCreateResponse, error) {
	out := new(LockerCreateResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/GetLocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) GetLockerFullInfo(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*LockerFullInfoResponse, error) {
	out := new(LockerFullInfoResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/GetLockerFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) GetLockerList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LockerList, error) {
	out := new(LockerList)
	err := c.cc.Invoke(ctx, "/locker.LockerService/GetLockerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) GetLockerFullInfoList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LockerFullInfoList, error) {
	out := new(LockerFullInfoList)
	err := c.cc.Invoke(ctx, "/locker.LockerService/GetLockerFullInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) LockerStreaming(ctx context.Context, opts ...grpc.CallOption) (LockerService_LockerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LockerService_serviceDesc.Streams[0], "/locker.LockerService/LockerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &lockerServiceLockerStreamingClient{stream}
	return x, nil
}

type LockerService_LockerStreamingClient interface {
	Send(*LockerRequest) error
	Recv() (*LockerStreamResponse, error)
	grpc.ClientStream
}

type lockerServiceLockerStreamingClient struct {
	grpc.ClientStream
}

func (x *lockerServiceLockerStreamingClient) Send(m *LockerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lockerServiceLockerStreamingClient) Recv() (*LockerStreamResponse, error) {
	m := new(LockerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lockerServiceClient) UnlockLocker(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/UnlockLocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) SetLocationTrackingInterval(ctx context.Context, in *LocationIntervalRequest, opts ...grpc.CallOption) (*LocationIntervalResponse, error) {
	out := new(LocationIntervalResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/SetLocationTrackingInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) GetSimCard(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*SimCardResponse, error) {
	out := new(SimCardResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/GetSimCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) GetLockerLocation(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/GetLockerLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) GetFirmwareInfo(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*FirmwareInfoResponse, error) {
	out := new(FirmwareInfoResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/GetFirmwareInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) GetLockInfo(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*LockerInfoResponse, error) {
	out := new(LockerInfoResponse)
	err := c.cc.Invoke(ctx, "/locker.LockerService/GetLockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) ShutDownLocker(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/locker.LockerService/ShutDownLocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerServiceClient) RestartLocker(ctx context.Context, in *LockerID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/locker.LockerService/RestartLocker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockerServiceServer is the server API for LockerService service.
type LockerServiceServer interface {
	CreateLocker(context.Context, *LockerCreateRequest) (*LockerCreateResponse, error)
	UpdateLocker(context.Context, *LockerCreateResponse) (*LockerCreateResponse, error)
	DeleteLocker(context.Context, *LockerID) (*Empty, error)
	DeleteLockerLocation(context.Context, *LockerID) (*Empty, error)
	GetLocker(context.Context, *LockerID) (*LockerCreateResponse, error)
	GetLockerFullInfo(context.Context, *LockerID) (*LockerFullInfoResponse, error)
	GetLockerList(context.Context, *Empty) (*LockerList, error)
	GetLockerFullInfoList(context.Context, *Empty) (*LockerFullInfoList, error)
	LockerStreaming(LockerService_LockerStreamingServer) error
	UnlockLocker(context.Context, *UnlockRequest) (*UnlockResponse, error)
	SetLocationTrackingInterval(context.Context, *LocationIntervalRequest) (*LocationIntervalResponse, error)
	GetSimCard(context.Context, *LockerID) (*SimCardResponse, error)
	GetLockerLocation(context.Context, *LocationRequest) (*LocationResponse, error)
	GetFirmwareInfo(context.Context, *LockerID) (*FirmwareInfoResponse, error)
	GetLockInfo(context.Context, *LockerID) (*LockerInfoResponse, error)
	ShutDownLocker(context.Context, *LockerID) (*Empty, error)
	RestartLocker(context.Context, *LockerID) (*Empty, error)
}

// UnimplementedLockerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLockerServiceServer struct {
}

func (*UnimplementedLockerServiceServer) CreateLocker(ctx context.Context, req *LockerCreateRequest) (*LockerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocker not implemented")
}
func (*UnimplementedLockerServiceServer) UpdateLocker(ctx context.Context, req *LockerCreateResponse) (*LockerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocker not implemented")
}
func (*UnimplementedLockerServiceServer) DeleteLocker(ctx context.Context, req *LockerID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocker not implemented")
}
func (*UnimplementedLockerServiceServer) DeleteLockerLocation(ctx context.Context, req *LockerID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLockerLocation not implemented")
}
func (*UnimplementedLockerServiceServer) GetLocker(ctx context.Context, req *LockerID) (*LockerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocker not implemented")
}
func (*UnimplementedLockerServiceServer) GetLockerFullInfo(ctx context.Context, req *LockerID) (*LockerFullInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockerFullInfo not implemented")
}
func (*UnimplementedLockerServiceServer) GetLockerList(ctx context.Context, req *Empty) (*LockerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockerList not implemented")
}
func (*UnimplementedLockerServiceServer) GetLockerFullInfoList(ctx context.Context, req *Empty) (*LockerFullInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockerFullInfoList not implemented")
}
func (*UnimplementedLockerServiceServer) LockerStreaming(srv LockerService_LockerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method LockerStreaming not implemented")
}
func (*UnimplementedLockerServiceServer) UnlockLocker(ctx context.Context, req *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockLocker not implemented")
}
func (*UnimplementedLockerServiceServer) SetLocationTrackingInterval(ctx context.Context, req *LocationIntervalRequest) (*LocationIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocationTrackingInterval not implemented")
}
func (*UnimplementedLockerServiceServer) GetSimCard(ctx context.Context, req *LockerID) (*SimCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimCard not implemented")
}
func (*UnimplementedLockerServiceServer) GetLockerLocation(ctx context.Context, req *LocationRequest) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockerLocation not implemented")
}
func (*UnimplementedLockerServiceServer) GetFirmwareInfo(ctx context.Context, req *LockerID) (*FirmwareInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirmwareInfo not implemented")
}
func (*UnimplementedLockerServiceServer) GetLockInfo(ctx context.Context, req *LockerID) (*LockerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockInfo not implemented")
}
func (*UnimplementedLockerServiceServer) ShutDownLocker(ctx context.Context, req *LockerID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutDownLocker not implemented")
}
func (*UnimplementedLockerServiceServer) RestartLocker(ctx context.Context, req *LockerID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartLocker not implemented")
}

func RegisterLockerServiceServer(s *grpc.Server, srv LockerServiceServer) {
	s.RegisterService(&_LockerService_serviceDesc, srv)
}

func _LockerService_CreateLocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).CreateLocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/CreateLocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).CreateLocker(ctx, req.(*LockerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_UpdateLocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerCreateResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).UpdateLocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/UpdateLocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).UpdateLocker(ctx, req.(*LockerCreateResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_DeleteLocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).DeleteLocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/DeleteLocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).DeleteLocker(ctx, req.(*LockerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_DeleteLockerLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).DeleteLockerLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/DeleteLockerLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).DeleteLockerLocation(ctx, req.(*LockerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_GetLocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).GetLocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/GetLocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).GetLocker(ctx, req.(*LockerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_GetLockerFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).GetLockerFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/GetLockerFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).GetLockerFullInfo(ctx, req.(*LockerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_GetLockerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).GetLockerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/GetLockerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).GetLockerList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_GetLockerFullInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).GetLockerFullInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/GetLockerFullInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).GetLockerFullInfoList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_LockerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LockerServiceServer).LockerStreaming(&lockerServiceLockerStreamingServer{stream})
}

type LockerService_LockerStreamingServer interface {
	Send(*LockerStreamResponse) error
	Recv() (*LockerRequest, error)
	grpc.ServerStream
}

type lockerServiceLockerStreamingServer struct {
	grpc.ServerStream
}

func (x *lockerServiceLockerStreamingServer) Send(m *LockerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lockerServiceLockerStreamingServer) Recv() (*LockerRequest, error) {
	m := new(LockerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LockerService_UnlockLocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).UnlockLocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/UnlockLocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).UnlockLocker(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_SetLocationTrackingInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).SetLocationTrackingInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/SetLocationTrackingInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).SetLocationTrackingInterval(ctx, req.(*LocationIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_GetSimCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).GetSimCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/GetSimCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).GetSimCard(ctx, req.(*LockerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_GetLockerLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).GetLockerLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/GetLockerLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).GetLockerLocation(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_GetFirmwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).GetFirmwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/GetFirmwareInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).GetFirmwareInfo(ctx, req.(*LockerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_GetLockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).GetLockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/GetLockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).GetLockInfo(ctx, req.(*LockerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_ShutDownLocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).ShutDownLocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/ShutDownLocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).ShutDownLocker(ctx, req.(*LockerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockerService_RestartLocker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServiceServer).RestartLocker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locker.LockerService/RestartLocker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServiceServer).RestartLocker(ctx, req.(*LockerID))
	}
	return interceptor(ctx, in, info, handler)
}

var _LockerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "locker.LockerService",
	HandlerType: (*LockerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLocker",
			Handler:    _LockerService_CreateLocker_Handler,
		},
		{
			MethodName: "UpdateLocker",
			Handler:    _LockerService_UpdateLocker_Handler,
		},
		{
			MethodName: "DeleteLocker",
			Handler:    _LockerService_DeleteLocker_Handler,
		},
		{
			MethodName: "DeleteLockerLocation",
			Handler:    _LockerService_DeleteLockerLocation_Handler,
		},
		{
			MethodName: "GetLocker",
			Handler:    _LockerService_GetLocker_Handler,
		},
		{
			MethodName: "GetLockerFullInfo",
			Handler:    _LockerService_GetLockerFullInfo_Handler,
		},
		{
			MethodName: "GetLockerList",
			Handler:    _LockerService_GetLockerList_Handler,
		},
		{
			MethodName: "GetLockerFullInfoList",
			Handler:    _LockerService_GetLockerFullInfoList_Handler,
		},
		{
			MethodName: "UnlockLocker",
			Handler:    _LockerService_UnlockLocker_Handler,
		},
		{
			MethodName: "SetLocationTrackingInterval",
			Handler:    _LockerService_SetLocationTrackingInterval_Handler,
		},
		{
			MethodName: "GetSimCard",
			Handler:    _LockerService_GetSimCard_Handler,
		},
		{
			MethodName: "GetLockerLocation",
			Handler:    _LockerService_GetLockerLocation_Handler,
		},
		{
			MethodName: "GetFirmwareInfo",
			Handler:    _LockerService_GetFirmwareInfo_Handler,
		},
		{
			MethodName: "GetLockInfo",
			Handler:    _LockerService_GetLockInfo_Handler,
		},
		{
			MethodName: "ShutDownLocker",
			Handler:    _LockerService_ShutDownLocker_Handler,
		},
		{
			MethodName: "RestartLocker",
			Handler:    _LockerService_RestartLocker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LockerStreaming",
			Handler:       _LockerService_LockerStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "locker/locker.proto",
}

func (m *LockerFullInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerFullInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerFullInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LockersInfo) > 0 {
		for iNdEx := len(m.LockersInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockersInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Lockers) > 0 {
		for iNdEx := len(m.Lockers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lockers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockerFullInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerFullInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerFullInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsConnected {
		i--
		if m.IsConnected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsLocked {
		i--
		if m.IsLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x55
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x4d
	}
	if m.LocationInterval != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.LocationInterval))
		i--
		dAtA[i] = 0x40
	}
	if len(m.AlarmStatus) > 0 {
		i -= len(m.AlarmStatus)
		copy(dAtA[i:], m.AlarmStatus)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.AlarmStatus)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Sate != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.Sate))
		i--
		dAtA[i] = 0x30
	}
	if m.Signal != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.Signal))
		i--
		dAtA[i] = 0x28
	}
	if m.Voltage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Voltage))))
		i--
		dAtA[i] = 0x25
	}
	if m.SimCard != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.SimCard))
		i--
		dAtA[i] = 0x18
	}
	if m.IMEI != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.IMEI))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SimCard != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.SimCard))
		i--
		dAtA[i] = 0x10
	}
	if m.IMEI != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.IMEI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SimCard != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.SimCard))
		i--
		dAtA[i] = 0x18
	}
	if m.IMEI != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.IMEI))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if m.Retention != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.Retention))
		i--
		dAtA[i] = 0x28
	}
	if m.IsLocked {
		i--
		if m.IsLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.GPSsate != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.GPSsate))
		i--
		dAtA[i] = 0x18
	}
	if m.Signal != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.Signal))
		i--
		dAtA[i] = 0x10
	}
	if m.Voltage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Voltage))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *FirmwareInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirmwareInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirmwareInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeviceDate) > 0 {
		i -= len(m.DeviceDate)
		copy(dAtA[i:], m.DeviceDate)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.DeviceDate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceInfo) > 0 {
		i -= len(m.DeviceInfo)
		copy(dAtA[i:], m.DeviceInfo)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.DeviceInfo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimCardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimCardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimCardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SIMCARD != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.SIMCARD))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LockerID != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.LockerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocationIntervalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationIntervalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationIntervalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x12
	}
	if m.SetInterval != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.SetInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocationIntervalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationIntervalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationIntervalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IntervalInSecond != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.IntervalInSecond))
		i--
		dAtA[i] = 0x10
	}
	if m.LockerID != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.LockerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LockerMessage) > 0 {
		i -= len(m.LockerMessage)
		copy(dAtA[i:], m.LockerMessage)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.LockerMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.LockerIMEI != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.LockerIMEI))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockerStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockerStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockerStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StreamMessage) > 0 {
		i -= len(m.StreamMessage)
		copy(dAtA[i:], m.StreamMessage)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.StreamMessage)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *LocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LockerID != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.LockerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ModeIndication) > 0 {
		i -= len(m.ModeIndication)
		copy(dAtA[i:], m.ModeIndication)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.ModeIndication)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.HeightUnit) > 0 {
		i -= len(m.HeightUnit)
		copy(dAtA[i:], m.HeightUnit)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.HeightUnit)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Altitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Altitude))))
		i--
		dAtA[i] = 0x65
	}
	if len(m.UTCdate) > 0 {
		i -= len(m.UTCdate)
		copy(dAtA[i:], m.UTCdate)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.UTCdate)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PositionAccuracy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PositionAccuracy))))
		i--
		dAtA[i] = 0x55
	}
	if m.CountSate != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.CountSate))
		i--
		dAtA[i] = 0x48
	}
	if m.IsEast {
		i--
		if m.IsEast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x3d
	}
	if m.IsNorth {
		i--
		if m.IsNorth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x2d
	}
	if m.IsValid {
		i--
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.UTCtime) > 0 {
		i -= len(m.UTCtime)
		copy(dAtA[i:], m.UTCtime)
		i = encodeVarintLocker(dAtA, i, uint64(len(m.UTCtime)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsTracking {
		i--
		if m.IsTracking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.LockerID != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.LockerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UnlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UnlockedTime != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.UnlockedTime))
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.UnlockResult {
		i--
		if m.UnlockResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResetTime {
		i--
		if m.ResetTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.UserID != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x10
	}
	if m.ScanId != 0 {
		i = encodeVarintLocker(dAtA, i, uint64(m.ScanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocker(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockerFullInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockersInfo) > 0 {
		for _, e := range m.LockersInfo {
			l = e.Size()
			n += 1 + l + sovLocker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lockers) > 0 {
		for _, e := range m.Lockers {
			l = e.Size()
			n += 1 + l + sovLocker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerFullInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLocker(uint64(m.Id))
	}
	if m.IMEI != 0 {
		n += 1 + sovLocker(uint64(m.IMEI))
	}
	if m.SimCard != 0 {
		n += 1 + sovLocker(uint64(m.SimCard))
	}
	if m.Voltage != 0 {
		n += 5
	}
	if m.Signal != 0 {
		n += 1 + sovLocker(uint64(m.Signal))
	}
	if m.Sate != 0 {
		n += 1 + sovLocker(uint64(m.Sate))
	}
	l = len(m.AlarmStatus)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.LocationInterval != 0 {
		n += 1 + sovLocker(uint64(m.LocationInterval))
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.IsLocked {
		n += 2
	}
	if m.IsConnected {
		n += 2
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IMEI != 0 {
		n += 1 + sovLocker(uint64(m.IMEI))
	}
	if m.SimCard != 0 {
		n += 1 + sovLocker(uint64(m.SimCard))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovLocker(uint64(m.ID))
	}
	if m.IMEI != 0 {
		n += 1 + sovLocker(uint64(m.IMEI))
	}
	if m.SimCard != 0 {
		n += 1 + sovLocker(uint64(m.SimCard))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voltage != 0 {
		n += 5
	}
	if m.Signal != 0 {
		n += 1 + sovLocker(uint64(m.Signal))
	}
	if m.GPSsate != 0 {
		n += 1 + sovLocker(uint64(m.GPSsate))
	}
	if m.IsLocked {
		n += 2
	}
	if m.Retention != 0 {
		n += 1 + sovLocker(uint64(m.Retention))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FirmwareInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceInfo)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = len(m.DeviceDate)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimCardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SIMCARD != 0 {
		n += 1 + sovLocker(uint64(m.SIMCARD))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockerID != 0 {
		n += 1 + sovLocker(uint64(m.LockerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationIntervalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetInterval != 0 {
		n += 1 + sovLocker(uint64(m.SetInterval))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationIntervalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockerID != 0 {
		n += 1 + sovLocker(uint64(m.LockerID))
	}
	if m.IntervalInSecond != 0 {
		n += 1 + sovLocker(uint64(m.IntervalInSecond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockerIMEI != 0 {
		n += 1 + sovLocker(uint64(m.LockerIMEI))
	}
	l = len(m.LockerMessage)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LockerStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamMessage)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockerID != 0 {
		n += 1 + sovLocker(uint64(m.LockerID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockerID != 0 {
		n += 1 + sovLocker(uint64(m.LockerID))
	}
	if m.IsTracking {
		n += 2
	}
	l = len(m.UTCtime)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.IsValid {
		n += 2
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.IsNorth {
		n += 2
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.IsEast {
		n += 2
	}
	if m.CountSate != 0 {
		n += 1 + sovLocker(uint64(m.CountSate))
	}
	if m.PositionAccuracy != 0 {
		n += 5
	}
	l = len(m.UTCdate)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.Altitude != 0 {
		n += 5
	}
	l = len(m.HeightUnit)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = len(m.ModeIndication)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovLocker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnlockResult {
		n += 2
	}
	if m.UserID != 0 {
		n += 1 + sovLocker(uint64(m.UserID))
	}
	if m.UnlockedTime != 0 {
		n += 1 + sovLocker(uint64(m.UnlockedTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScanId != 0 {
		n += 1 + sovLocker(uint64(m.ScanId))
	}
	if m.UserID != 0 {
		n += 1 + sovLocker(uint64(m.UserID))
	}
	if m.ResetTime {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLocker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocker(x uint64) (n int) {
	return sovLocker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockerFullInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerFullInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerFullInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockersInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockersInfo = append(m.LockersInfo, &LockerFullInfoResponse{})
			if err := m.LockersInfo[len(m.LockersInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lockers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lockers = append(m.Lockers, &LockerCreateResponse{})
			if err := m.Lockers[len(m.Lockers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerFullInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerFullInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerFullInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMEI", wireType)
			}
			m.IMEI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMEI |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimCard", wireType)
			}
			m.SimCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimCard |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Voltage = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			m.Signal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Signal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sate", wireType)
			}
			m.Sate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlarmStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationInterval", wireType)
			}
			m.LocationInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocationInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocked = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConnected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConnected = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMEI", wireType)
			}
			m.IMEI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMEI |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimCard", wireType)
			}
			m.SimCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimCard |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IMEI", wireType)
			}
			m.IMEI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IMEI |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimCard", wireType)
			}
			m.SimCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimCard |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Voltage = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			m.Signal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Signal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GPSsate", wireType)
			}
			m.GPSsate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GPSsate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocked = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retention", wireType)
			}
			m.Retention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retention |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirmwareInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirmwareInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirmwareInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimCardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimCardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimCardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SIMCARD", wireType)
			}
			m.SIMCARD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SIMCARD |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerID", wireType)
			}
			m.LockerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationIntervalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationIntervalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationIntervalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetInterval", wireType)
			}
			m.SetInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationIntervalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationIntervalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationIntervalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerID", wireType)
			}
			m.LockerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalInSecond", wireType)
			}
			m.IntervalInSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalInSecond |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerIMEI", wireType)
			}
			m.LockerIMEI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerIMEI |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockerStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockerStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockerStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerID", wireType)
			}
			m.LockerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerID", wireType)
			}
			m.LockerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockerID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTracking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTracking = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UTCtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UTCtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNorth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNorth = bool(v != 0)
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEast = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountSate", wireType)
			}
			m.CountSate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountSate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionAccuracy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PositionAccuracy = float32(math.Float32frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UTCdate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UTCdate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Altitude = float32(math.Float32frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeightUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeIndication", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeIndication = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlockResult = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockedTime", wireType)
			}
			m.UnlockedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanId", wireType)
			}
			m.ScanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScanId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResetTime = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLocker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocker = fmt.Errorf("proto: unexpected end of group")
)
